/* Generated By:JJTree&JavaCC: Do not edit this line. PythonGrammar38TokenManager.java */
package org.python.pydev.parser.grammar38;
import java.util.ArrayList;
import java.util.List;
import org.python.pydev.parser.IGrammar;
import org.python.pydev.parser.grammarcommon.AbstractJJTPythonGrammarState;
import org.python.pydev.parser.grammarcommon.AbstractPythonGrammar;
import org.python.pydev.parser.grammarcommon.AbstractTokenManager;
import org.python.pydev.parser.grammarcommon.EmptySuiteException;
import org.python.pydev.parser.grammarcommon.IJJTPythonGrammarState;
import org.python.pydev.parser.grammarcommon.ITreeBuilder;
import org.python.pydev.parser.grammarcommon.JJTPythonGrammarState;
import org.python.pydev.parser.grammarcommon.JfpDef;
import org.python.pydev.parser.grammarcommon.WithNameInvalidException;
import org.python.pydev.parser.jython.FastCharStream;
import org.python.pydev.parser.jython.ParseException;
import org.python.pydev.parser.jython.SimpleNode;
import org.python.pydev.parser.jython.Token;
import org.python.pydev.parser.jython.TokenMgrError;
import org.python.pydev.parser.jython.ast.Import;
import org.python.pydev.parser.jython.ast.ImportFrom;
import org.python.pydev.parser.jython.ast.Name;
import org.python.pydev.parser.jython.ast.Num;
import org.python.pydev.parser.jython.ast.Starred;
import org.python.pydev.parser.jython.ast.Str;
import org.python.pydev.parser.jython.ast.Suite;
import org.python.pydev.parser.jython.ast.Yield;
import org.python.pydev.parser.jython.ast.modType;
import org.python.pydev.shared_core.string.FastStringBuffer;
import org.python.pydev.parser.jython.ast.Await;
import org.python.pydev.parser.jython.ast.Expr;
import org.python.pydev.parser.IGrammar2;

/** Token Manager. */
@SuppressWarnings("unused") public final class PythonGrammar38TokenManager extends AbstractTokenManager implements PythonGrammar38Constants
{
    protected Class<?> getConstantsClass(){
        return PythonGrammar38Constants.class;
    }





    /**
     * @return The current level of the indentation in the current line.
     */
    public int getCurrentLineIndentation(){
        return indent;
    }

    /**
     * @return The current level of the indentation.
     */
    public int getLastIndentation(){
        return indentation.atLevel();
    }


    public final void indenting(int ind) {
        indent = ind;
        if (indent == indentation.atLevel())
            SwitchTo(INDENTATION_UNCHANGED);
        else
            SwitchTo(INDENTING);
    }

  /** Debug output. */
  public  java.io.PrintStream debugStream = System.out;
  /** Set debug output. */
  public  void setDebugStream(java.io.PrintStream ds) { debugStream = ds; }
private final int jjStopStringLiteralDfa_3(int pos, long active0)
{
   switch (pos)
   {
      default :
         return -1;
   }
}
private final int jjStartNfa_3(int pos, long active0)
{
   return jjMoveNfa_3(jjStopStringLiteralDfa_3(pos, active0), pos + 1);
}
private int jjStopAtPos(int pos, int kind)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   return pos + 1;
}
private int jjMoveStringLiteralDfa0_3()
{
   switch(curChar)
   {
      case 9:
         return jjStopAtPos(0, 8);
      case 12:
         return jjStopAtPos(0, 10);
      case 32:
         return jjStopAtPos(0, 9);
      default :
         return jjMoveNfa_3(1, 0);
   }
}
static final long[] jjbitVec0 = {
   0xfffffffffffffffeL, 0xffffffffffffffffL, 0xffffffffffffffffL, 0xffffffffffffffffL
};
static final long[] jjbitVec2 = {
   0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL
};
private int jjMoveNfa_3(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 8;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 1:
                  if ((0x2400L & l) != 0L)
                  {
                     if (kind > 11)
                        kind = 11;
                  }
                  else if (curChar == 35)
                     jjCheckNAddStates(0, 2);
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 0;
                  break;
               case 0:
                  if (curChar == 10 && kind > 11)
                     kind = 11;
                  break;
               case 2:
                  if ((0x2400L & l) != 0L && kind > 11)
                     kind = 11;
                  break;
               case 3:
                  if (curChar == 35)
                     jjCheckNAddStates(0, 2);
                  break;
               case 4:
                  if ((0xffffffffffffdbffL & l) != 0L)
                     jjCheckNAddStates(0, 2);
                  break;
               case 5:
                  if (curChar == 10 && kind > 16)
                     kind = 16;
                  break;
               case 6:
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 5;
                  break;
               case 7:
                  if ((0x2400L & l) != 0L && kind > 16)
                     kind = 16;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 4:
                  jjAddStates(0, 2);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (int)(curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 4:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjAddStates(0, 2);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 8 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private int jjMoveStringLiteralDfa0_22()
{
   return 1;
}
private final int jjStopStringLiteralDfa_20(int pos, long active0, long active1, long active2)
{
   switch (pos)
   {
      case 0:
         if ((active2 & 0x40000L) != 0L)
         {
            jjmatchedKind = 177;
            return -1;
         }
         return -1;
      case 1:
         if ((active2 & 0x40000L) != 0L)
         {
            if (jjmatchedPos == 0)
            {
               jjmatchedKind = 177;
               jjmatchedPos = 0;
            }
            return -1;
         }
         return -1;
      default :
         return -1;
   }
}
private final int jjStartNfa_20(int pos, long active0, long active1, long active2)
{
   return jjMoveNfa_20(jjStopStringLiteralDfa_20(pos, active0, active1, active2), pos + 1);
}
private int jjMoveStringLiteralDfa0_20()
{
   switch(curChar)
   {
      case 10:
         return jjStopAtPos(0, 175);
      case 13:
         jjmatchedKind = 176;
         return jjMoveStringLiteralDfa1_20(0x400000000000L);
      case 39:
         return jjMoveStringLiteralDfa1_20(0x40000L);
      default :
         return jjMoveNfa_20(0, 0);
   }
}
private int jjMoveStringLiteralDfa1_20(long active2)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_20(0, 0L, 0L, active2);
      return 1;
   }
   switch(curChar)
   {
      case 10:
         if ((active2 & 0x400000000000L) != 0L)
            return jjStopAtPos(1, 174);
         break;
      case 39:
         return jjMoveStringLiteralDfa2_20(active2, 0x40000L);
      default :
         break;
   }
   return jjStartNfa_20(0, 0L, 0L, active2);
}
private int jjMoveStringLiteralDfa2_20(long old2, long active2)
{
   if (((active2 &= old2)) == 0L)
      return jjStartNfa_20(0, 0L, 0L, old2);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_20(1, 0L, 0L, active2);
      return 2;
   }
   switch(curChar)
   {
      case 39:
         if ((active2 & 0x40000L) != 0L)
            return jjStopAtPos(2, 146);
         break;
      default :
         break;
   }
   return jjStartNfa_20(1, 0L, 0L, active2);
}
private int jjMoveNfa_20(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 3;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0xffffffffffffdbffL & l) != 0L && kind > 177)
                     kind = 177;
                  break;
               case 2:
                  if ((0xffffffffffffdbffL & l) != 0L && kind > 178)
                     kind = 178;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if (kind > 177)
                     kind = 177;
                  if (curChar == 92)
                     jjstateSet[jjnewStateCnt++] = 2;
                  break;
               case 1:
                  if (curChar == 92)
                     jjstateSet[jjnewStateCnt++] = 2;
                  break;
               case 2:
                  if (kind > 178)
                     kind = 178;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (int)(curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2) && kind > 177)
                     kind = 177;
                  break;
               case 2:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2) && kind > 178)
                     kind = 178;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 3 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private final int jjStopStringLiteralDfa_18(int pos, long active0, long active1, long active2)
{
   switch (pos)
   {
      case 0:
         if ((active2 & 0x1000000L) != 0L)
         {
            jjmatchedKind = 172;
            return 2;
         }
         return -1;
      case 1:
         if ((active2 & 0x1000000L) != 0L)
         {
            jjmatchedKind = 153;
            jjmatchedPos = 1;
            return -1;
         }
         return -1;
      default :
         return -1;
   }
}
private final int jjStartNfa_18(int pos, long active0, long active1, long active2)
{
   return jjMoveNfa_18(jjStopStringLiteralDfa_18(pos, active0, active1, active2), pos + 1);
}
private int jjMoveStringLiteralDfa0_18()
{
   switch(curChar)
   {
      case 39:
         return jjStopAtPos(0, 144);
      case 92:
         return jjMoveStringLiteralDfa1_18(0x1000000L);
      default :
         return jjMoveNfa_18(0, 0);
   }
}
private int jjMoveStringLiteralDfa1_18(long active2)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_18(0, 0L, 0L, active2);
      return 1;
   }
   switch(curChar)
   {
      case 13:
         return jjMoveStringLiteralDfa2_18(active2, 0x1000000L);
      default :
         break;
   }
   return jjStartNfa_18(0, 0L, 0L, active2);
}
private int jjMoveStringLiteralDfa2_18(long old2, long active2)
{
   if (((active2 &= old2)) == 0L)
      return jjStartNfa_18(0, 0L, 0L, old2);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_18(1, 0L, 0L, active2);
      return 2;
   }
   switch(curChar)
   {
      case 10:
         if ((active2 & 0x1000000L) != 0L)
            return jjStopAtPos(2, 152);
         break;
      default :
         break;
   }
   return jjStartNfa_18(1, 0L, 0L, active2);
}
private int jjMoveNfa_18(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 4;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0xffffffffffffdbffL & l) != 0L && kind > 172)
                     kind = 172;
                  break;
               case 2:
                  if ((0x2400L & l) != 0L)
                  {
                     if (kind > 153)
                        kind = 153;
                  }
                  else if (curChar == 39)
                  {
                     if (kind > 172)
                        kind = 172;
                  }
                  break;
               case 3:
                  if (curChar == 39 && kind > 172)
                     kind = 172;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if (kind > 172)
                     kind = 172;
                  if (curChar == 92)
                     jjAddStates(3, 4);
                  break;
               case 2:
                  if (curChar == 92 && kind > 172)
                     kind = 172;
                  break;
               case 1:
                  if (curChar == 92)
                     jjAddStates(3, 4);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (int)(curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2) && kind > 172)
                     kind = 172;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 4 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private int jjMoveStringLiteralDfa0_23()
{
   return 1;
}
private final int jjStopStringLiteralDfa_9(int pos, long active0, long active1, long active2)
{
   switch (pos)
   {
      case 0:
         if ((active2 & 0x80L) != 0L)
         {
            jjmatchedKind = 177;
            return -1;
         }
         return -1;
      case 1:
         if ((active2 & 0x80L) != 0L)
         {
            if (jjmatchedPos == 0)
            {
               jjmatchedKind = 177;
               jjmatchedPos = 0;
            }
            return -1;
         }
         return -1;
      default :
         return -1;
   }
}
private final int jjStartNfa_9(int pos, long active0, long active1, long active2)
{
   return jjMoveNfa_9(jjStopStringLiteralDfa_9(pos, active0, active1, active2), pos + 1);
}
private int jjMoveStringLiteralDfa0_9()
{
   switch(curChar)
   {
      case 10:
         return jjStopAtPos(0, 175);
      case 13:
         jjmatchedKind = 176;
         return jjMoveStringLiteralDfa1_9(0x400000000000L);
      case 34:
         return jjMoveStringLiteralDfa1_9(0x80L);
      default :
         return jjMoveNfa_9(0, 0);
   }
}
private int jjMoveStringLiteralDfa1_9(long active2)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_9(0, 0L, 0L, active2);
      return 1;
   }
   switch(curChar)
   {
      case 10:
         if ((active2 & 0x400000000000L) != 0L)
            return jjStopAtPos(1, 174);
         break;
      case 34:
         return jjMoveStringLiteralDfa2_9(active2, 0x80L);
      default :
         break;
   }
   return jjStartNfa_9(0, 0L, 0L, active2);
}
private int jjMoveStringLiteralDfa2_9(long old2, long active2)
{
   if (((active2 &= old2)) == 0L)
      return jjStartNfa_9(0, 0L, 0L, old2);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_9(1, 0L, 0L, active2);
      return 2;
   }
   switch(curChar)
   {
      case 34:
         if ((active2 & 0x80L) != 0L)
            return jjStopAtPos(2, 135);
         break;
      default :
         break;
   }
   return jjStartNfa_9(1, 0L, 0L, active2);
}
private int jjMoveNfa_9(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 3;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0xffffffffffffdbffL & l) != 0L && kind > 177)
                     kind = 177;
                  break;
               case 2:
                  if ((0xffffffffffffdbffL & l) != 0L && kind > 178)
                     kind = 178;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if (kind > 177)
                     kind = 177;
                  if (curChar == 92)
                     jjstateSet[jjnewStateCnt++] = 2;
                  break;
               case 1:
                  if (curChar == 92)
                     jjstateSet[jjnewStateCnt++] = 2;
                  break;
               case 2:
                  if (kind > 178)
                     kind = 178;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (int)(curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2) && kind > 177)
                     kind = 177;
                  break;
               case 2:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2) && kind > 178)
                     kind = 178;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 3 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private final int jjStopStringLiteralDfa_7(int pos, long active0, long active1, long active2)
{
   switch (pos)
   {
      case 0:
         if ((active2 & 0x400000L) != 0L)
         {
            jjmatchedKind = 173;
            return 2;
         }
         return -1;
      case 1:
         if ((active2 & 0x400000L) != 0L)
         {
            jjmatchedKind = 151;
            jjmatchedPos = 1;
            return -1;
         }
         return -1;
      default :
         return -1;
   }
}
private final int jjStartNfa_7(int pos, long active0, long active1, long active2)
{
   return jjMoveNfa_7(jjStopStringLiteralDfa_7(pos, active0, active1, active2), pos + 1);
}
private int jjMoveStringLiteralDfa0_7()
{
   switch(curChar)
   {
      case 34:
         return jjStopAtPos(0, 133);
      case 92:
         return jjMoveStringLiteralDfa1_7(0x400000L);
      default :
         return jjMoveNfa_7(0, 0);
   }
}
private int jjMoveStringLiteralDfa1_7(long active2)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_7(0, 0L, 0L, active2);
      return 1;
   }
   switch(curChar)
   {
      case 13:
         return jjMoveStringLiteralDfa2_7(active2, 0x400000L);
      default :
         break;
   }
   return jjStartNfa_7(0, 0L, 0L, active2);
}
private int jjMoveStringLiteralDfa2_7(long old2, long active2)
{
   if (((active2 &= old2)) == 0L)
      return jjStartNfa_7(0, 0L, 0L, old2);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_7(1, 0L, 0L, active2);
      return 2;
   }
   switch(curChar)
   {
      case 10:
         if ((active2 & 0x400000L) != 0L)
            return jjStopAtPos(2, 150);
         break;
      default :
         break;
   }
   return jjStartNfa_7(1, 0L, 0L, active2);
}
private int jjMoveNfa_7(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 4;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0xffffffffffffdbffL & l) != 0L && kind > 173)
                     kind = 173;
                  break;
               case 2:
                  if ((0x2400L & l) != 0L)
                  {
                     if (kind > 151)
                        kind = 151;
                  }
                  else if (curChar == 34)
                  {
                     if (kind > 173)
                        kind = 173;
                  }
                  break;
               case 3:
                  if (curChar == 34 && kind > 173)
                     kind = 173;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if (kind > 173)
                     kind = 173;
                  if (curChar == 92)
                     jjAddStates(3, 4);
                  break;
               case 2:
                  if (curChar == 92 && kind > 173)
                     kind = 173;
                  break;
               case 1:
                  if (curChar == 92)
                     jjAddStates(3, 4);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (int)(curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2) && kind > 173)
                     kind = 173;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 4 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private int jjMoveStringLiteralDfa0_28()
{
   return 1;
}
private final int jjStopStringLiteralDfa_16(int pos, long active0, long active1, long active2)
{
   switch (pos)
   {
      case 0:
         if ((active2 & 0x4000L) != 0L)
         {
            jjmatchedKind = 177;
            return -1;
         }
         return -1;
      case 1:
         if ((active2 & 0x4000L) != 0L)
         {
            if (jjmatchedPos == 0)
            {
               jjmatchedKind = 177;
               jjmatchedPos = 0;
            }
            return -1;
         }
         return -1;
      default :
         return -1;
   }
}
private final int jjStartNfa_16(int pos, long active0, long active1, long active2)
{
   return jjMoveNfa_16(jjStopStringLiteralDfa_16(pos, active0, active1, active2), pos + 1);
}
private int jjMoveStringLiteralDfa0_16()
{
   switch(curChar)
   {
      case 10:
         return jjStopAtPos(0, 175);
      case 13:
         jjmatchedKind = 176;
         return jjMoveStringLiteralDfa1_16(0x400000000000L);
      case 39:
         return jjMoveStringLiteralDfa1_16(0x4000L);
      default :
         return jjMoveNfa_16(0, 0);
   }
}
private int jjMoveStringLiteralDfa1_16(long active2)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_16(0, 0L, 0L, active2);
      return 1;
   }
   switch(curChar)
   {
      case 10:
         if ((active2 & 0x400000000000L) != 0L)
            return jjStopAtPos(1, 174);
         break;
      case 39:
         return jjMoveStringLiteralDfa2_16(active2, 0x4000L);
      default :
         break;
   }
   return jjStartNfa_16(0, 0L, 0L, active2);
}
private int jjMoveStringLiteralDfa2_16(long old2, long active2)
{
   if (((active2 &= old2)) == 0L)
      return jjStartNfa_16(0, 0L, 0L, old2);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_16(1, 0L, 0L, active2);
      return 2;
   }
   switch(curChar)
   {
      case 39:
         if ((active2 & 0x4000L) != 0L)
            return jjStopAtPos(2, 142);
         break;
      default :
         break;
   }
   return jjStartNfa_16(1, 0L, 0L, active2);
}
private int jjMoveNfa_16(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 3;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0xffffffffffffdbffL & l) != 0L && kind > 177)
                     kind = 177;
                  break;
               case 2:
                  if ((0xffffffffffffdbffL & l) != 0L && kind > 178)
                     kind = 178;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if (kind > 177)
                     kind = 177;
                  if (curChar == 92)
                     jjstateSet[jjnewStateCnt++] = 2;
                  break;
               case 1:
                  if (curChar == 92)
                     jjstateSet[jjnewStateCnt++] = 2;
                  break;
               case 2:
                  if (kind > 178)
                     kind = 178;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (int)(curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2) && kind > 177)
                     kind = 177;
                  break;
               case 2:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2) && kind > 178)
                     kind = 178;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 3 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private final int jjStopStringLiteralDfa_21(int pos, long active0, long active1, long active2)
{
   switch (pos)
   {
      case 0:
         if ((active2 & 0x80000L) != 0L)
         {
            jjmatchedKind = 177;
            return -1;
         }
         return -1;
      case 1:
         if ((active2 & 0x80000L) != 0L)
         {
            if (jjmatchedPos == 0)
            {
               jjmatchedKind = 177;
               jjmatchedPos = 0;
            }
            return -1;
         }
         return -1;
      default :
         return -1;
   }
}
private final int jjStartNfa_21(int pos, long active0, long active1, long active2)
{
   return jjMoveNfa_21(jjStopStringLiteralDfa_21(pos, active0, active1, active2), pos + 1);
}
private int jjMoveStringLiteralDfa0_21()
{
   switch(curChar)
   {
      case 10:
         return jjStopAtPos(0, 175);
      case 13:
         jjmatchedKind = 176;
         return jjMoveStringLiteralDfa1_21(0x400000000000L);
      case 34:
         return jjMoveStringLiteralDfa1_21(0x80000L);
      default :
         return jjMoveNfa_21(0, 0);
   }
}
private int jjMoveStringLiteralDfa1_21(long active2)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_21(0, 0L, 0L, active2);
      return 1;
   }
   switch(curChar)
   {
      case 10:
         if ((active2 & 0x400000000000L) != 0L)
            return jjStopAtPos(1, 174);
         break;
      case 34:
         return jjMoveStringLiteralDfa2_21(active2, 0x80000L);
      default :
         break;
   }
   return jjStartNfa_21(0, 0L, 0L, active2);
}
private int jjMoveStringLiteralDfa2_21(long old2, long active2)
{
   if (((active2 &= old2)) == 0L)
      return jjStartNfa_21(0, 0L, 0L, old2);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_21(1, 0L, 0L, active2);
      return 2;
   }
   switch(curChar)
   {
      case 34:
         if ((active2 & 0x80000L) != 0L)
            return jjStopAtPos(2, 147);
         break;
      default :
         break;
   }
   return jjStartNfa_21(1, 0L, 0L, active2);
}
private int jjMoveNfa_21(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 3;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0xffffffffffffdbffL & l) != 0L && kind > 177)
                     kind = 177;
                  break;
               case 2:
                  if ((0xffffffffffffdbffL & l) != 0L && kind > 178)
                     kind = 178;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if (kind > 177)
                     kind = 177;
                  if (curChar == 92)
                     jjstateSet[jjnewStateCnt++] = 2;
                  break;
               case 1:
                  if (curChar == 92)
                     jjstateSet[jjnewStateCnt++] = 2;
                  break;
               case 2:
                  if (kind > 178)
                     kind = 178;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (int)(curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2) && kind > 177)
                     kind = 177;
                  break;
               case 2:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2) && kind > 178)
                     kind = 178;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 3 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private int jjMoveStringLiteralDfa0_29()
{
   return 1;
}
private final int jjStopStringLiteralDfa_14(int pos, long active0, long active1, long active2)
{
   switch (pos)
   {
      case 0:
         if ((active2 & 0x100000000L) != 0L)
         {
            jjmatchedKind = 172;
            return 2;
         }
         return -1;
      case 1:
         if ((active2 & 0x100000000L) != 0L)
         {
            jjmatchedKind = 161;
            jjmatchedPos = 1;
            return -1;
         }
         return -1;
      default :
         return -1;
   }
}
private final int jjStartNfa_14(int pos, long active0, long active1, long active2)
{
   return jjMoveNfa_14(jjStopStringLiteralDfa_14(pos, active0, active1, active2), pos + 1);
}
private int jjMoveStringLiteralDfa0_14()
{
   switch(curChar)
   {
      case 39:
         return jjStopAtPos(0, 140);
      case 92:
         return jjMoveStringLiteralDfa1_14(0x100000000L);
      default :
         return jjMoveNfa_14(0, 0);
   }
}
private int jjMoveStringLiteralDfa1_14(long active2)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_14(0, 0L, 0L, active2);
      return 1;
   }
   switch(curChar)
   {
      case 13:
         return jjMoveStringLiteralDfa2_14(active2, 0x100000000L);
      default :
         break;
   }
   return jjStartNfa_14(0, 0L, 0L, active2);
}
private int jjMoveStringLiteralDfa2_14(long old2, long active2)
{
   if (((active2 &= old2)) == 0L)
      return jjStartNfa_14(0, 0L, 0L, old2);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_14(1, 0L, 0L, active2);
      return 2;
   }
   switch(curChar)
   {
      case 10:
         if ((active2 & 0x100000000L) != 0L)
            return jjStopAtPos(2, 160);
         break;
      default :
         break;
   }
   return jjStartNfa_14(1, 0L, 0L, active2);
}
private int jjMoveNfa_14(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 4;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0xffffffffffffdbffL & l) != 0L && kind > 172)
                     kind = 172;
                  break;
               case 2:
                  if ((0x2400L & l) != 0L)
                  {
                     if (kind > 161)
                        kind = 161;
                  }
                  else if (curChar == 39)
                  {
                     if (kind > 172)
                        kind = 172;
                  }
                  break;
               case 3:
                  if (curChar == 39 && kind > 172)
                     kind = 172;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if (kind > 172)
                     kind = 172;
                  if (curChar == 92)
                     jjAddStates(3, 4);
                  break;
               case 2:
                  if (curChar == 92 && kind > 172)
                     kind = 172;
                  break;
               case 1:
                  if (curChar == 92)
                     jjAddStates(3, 4);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (int)(curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2) && kind > 172)
                     kind = 172;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 4 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private final int jjStopStringLiteralDfa_12(int pos, long active0, long active1, long active2)
{
   switch (pos)
   {
      case 0:
         if ((active2 & 0x400L) != 0L)
         {
            jjmatchedKind = 177;
            return -1;
         }
         return -1;
      case 1:
         if ((active2 & 0x400L) != 0L)
         {
            if (jjmatchedPos == 0)
            {
               jjmatchedKind = 177;
               jjmatchedPos = 0;
            }
            return -1;
         }
         return -1;
      default :
         return -1;
   }
}
private final int jjStartNfa_12(int pos, long active0, long active1, long active2)
{
   return jjMoveNfa_12(jjStopStringLiteralDfa_12(pos, active0, active1, active2), pos + 1);
}
private int jjMoveStringLiteralDfa0_12()
{
   switch(curChar)
   {
      case 10:
         return jjStopAtPos(0, 175);
      case 13:
         jjmatchedKind = 176;
         return jjMoveStringLiteralDfa1_12(0x400000000000L);
      case 39:
         return jjMoveStringLiteralDfa1_12(0x400L);
      default :
         return jjMoveNfa_12(0, 0);
   }
}
private int jjMoveStringLiteralDfa1_12(long active2)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_12(0, 0L, 0L, active2);
      return 1;
   }
   switch(curChar)
   {
      case 10:
         if ((active2 & 0x400000000000L) != 0L)
            return jjStopAtPos(1, 174);
         break;
      case 39:
         return jjMoveStringLiteralDfa2_12(active2, 0x400L);
      default :
         break;
   }
   return jjStartNfa_12(0, 0L, 0L, active2);
}
private int jjMoveStringLiteralDfa2_12(long old2, long active2)
{
   if (((active2 &= old2)) == 0L)
      return jjStartNfa_12(0, 0L, 0L, old2);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_12(1, 0L, 0L, active2);
      return 2;
   }
   switch(curChar)
   {
      case 39:
         if ((active2 & 0x400L) != 0L)
            return jjStopAtPos(2, 138);
         break;
      default :
         break;
   }
   return jjStartNfa_12(1, 0L, 0L, active2);
}
private int jjMoveNfa_12(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 3;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0xffffffffffffdbffL & l) != 0L && kind > 177)
                     kind = 177;
                  break;
               case 2:
                  if ((0xffffffffffffdbffL & l) != 0L && kind > 178)
                     kind = 178;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if (kind > 177)
                     kind = 177;
                  if (curChar == 92)
                     jjstateSet[jjnewStateCnt++] = 2;
                  break;
               case 1:
                  if (curChar == 92)
                     jjstateSet[jjnewStateCnt++] = 2;
                  break;
               case 2:
                  if (kind > 178)
                     kind = 178;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (int)(curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2) && kind > 177)
                     kind = 177;
                  break;
               case 2:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2) && kind > 178)
                     kind = 178;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 3 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private final int jjStopStringLiteralDfa_19(int pos, long active0, long active1, long active2)
{
   switch (pos)
   {
      case 0:
         if ((active2 & 0x4000000L) != 0L)
         {
            jjmatchedKind = 173;
            return 2;
         }
         return -1;
      case 1:
         if ((active2 & 0x4000000L) != 0L)
         {
            jjmatchedKind = 155;
            jjmatchedPos = 1;
            return -1;
         }
         return -1;
      default :
         return -1;
   }
}
private final int jjStartNfa_19(int pos, long active0, long active1, long active2)
{
   return jjMoveNfa_19(jjStopStringLiteralDfa_19(pos, active0, active1, active2), pos + 1);
}
private int jjMoveStringLiteralDfa0_19()
{
   switch(curChar)
   {
      case 34:
         return jjStopAtPos(0, 145);
      case 92:
         return jjMoveStringLiteralDfa1_19(0x4000000L);
      default :
         return jjMoveNfa_19(0, 0);
   }
}
private int jjMoveStringLiteralDfa1_19(long active2)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_19(0, 0L, 0L, active2);
      return 1;
   }
   switch(curChar)
   {
      case 13:
         return jjMoveStringLiteralDfa2_19(active2, 0x4000000L);
      default :
         break;
   }
   return jjStartNfa_19(0, 0L, 0L, active2);
}
private int jjMoveStringLiteralDfa2_19(long old2, long active2)
{
   if (((active2 &= old2)) == 0L)
      return jjStartNfa_19(0, 0L, 0L, old2);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_19(1, 0L, 0L, active2);
      return 2;
   }
   switch(curChar)
   {
      case 10:
         if ((active2 & 0x4000000L) != 0L)
            return jjStopAtPos(2, 154);
         break;
      default :
         break;
   }
   return jjStartNfa_19(1, 0L, 0L, active2);
}
private int jjMoveNfa_19(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 4;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0xffffffffffffdbffL & l) != 0L && kind > 173)
                     kind = 173;
                  break;
               case 2:
                  if ((0x2400L & l) != 0L)
                  {
                     if (kind > 155)
                        kind = 155;
                  }
                  else if (curChar == 34)
                  {
                     if (kind > 173)
                        kind = 173;
                  }
                  break;
               case 3:
                  if (curChar == 34 && kind > 173)
                     kind = 173;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if (kind > 173)
                     kind = 173;
                  if (curChar == 92)
                     jjAddStates(3, 4);
                  break;
               case 2:
                  if (curChar == 92 && kind > 173)
                     kind = 173;
                  break;
               case 1:
                  if (curChar == 92)
                     jjAddStates(3, 4);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (int)(curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2) && kind > 173)
                     kind = 173;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 4 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private final int jjStopStringLiteralDfa_10(int pos, long active0, long active1, long active2)
{
   switch (pos)
   {
      case 0:
         if ((active2 & 0x10000000L) != 0L)
         {
            jjmatchedKind = 172;
            return 2;
         }
         return -1;
      case 1:
         if ((active2 & 0x10000000L) != 0L)
         {
            jjmatchedKind = 157;
            jjmatchedPos = 1;
            return -1;
         }
         return -1;
      default :
         return -1;
   }
}
private final int jjStartNfa_10(int pos, long active0, long active1, long active2)
{
   return jjMoveNfa_10(jjStopStringLiteralDfa_10(pos, active0, active1, active2), pos + 1);
}
private int jjMoveStringLiteralDfa0_10()
{
   switch(curChar)
   {
      case 39:
         return jjStopAtPos(0, 136);
      case 92:
         return jjMoveStringLiteralDfa1_10(0x10000000L);
      default :
         return jjMoveNfa_10(0, 0);
   }
}
private int jjMoveStringLiteralDfa1_10(long active2)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_10(0, 0L, 0L, active2);
      return 1;
   }
   switch(curChar)
   {
      case 13:
         return jjMoveStringLiteralDfa2_10(active2, 0x10000000L);
      default :
         break;
   }
   return jjStartNfa_10(0, 0L, 0L, active2);
}
private int jjMoveStringLiteralDfa2_10(long old2, long active2)
{
   if (((active2 &= old2)) == 0L)
      return jjStartNfa_10(0, 0L, 0L, old2);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_10(1, 0L, 0L, active2);
      return 2;
   }
   switch(curChar)
   {
      case 10:
         if ((active2 & 0x10000000L) != 0L)
            return jjStopAtPos(2, 156);
         break;
      default :
         break;
   }
   return jjStartNfa_10(1, 0L, 0L, active2);
}
private int jjMoveNfa_10(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 4;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0xffffffffffffdbffL & l) != 0L && kind > 172)
                     kind = 172;
                  break;
               case 2:
                  if ((0x2400L & l) != 0L)
                  {
                     if (kind > 157)
                        kind = 157;
                  }
                  else if (curChar == 39)
                  {
                     if (kind > 172)
                        kind = 172;
                  }
                  break;
               case 3:
                  if (curChar == 39 && kind > 172)
                     kind = 172;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if (kind > 172)
                     kind = 172;
                  if (curChar == 92)
                     jjAddStates(3, 4);
                  break;
               case 2:
                  if (curChar == 92 && kind > 172)
                     kind = 172;
                  break;
               case 1:
                  if (curChar == 92)
                     jjAddStates(3, 4);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (int)(curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2) && kind > 172)
                     kind = 172;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 4 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private int jjMoveStringLiteralDfa0_24()
{
   return 1;
}
private int jjMoveStringLiteralDfa0_26()
{
   return 1;
}
private final int jjStopStringLiteralDfa_4(int pos, long active0)
{
   switch (pos)
   {
      default :
         return -1;
   }
}
private final int jjStartNfa_4(int pos, long active0)
{
   return jjMoveNfa_4(jjStopStringLiteralDfa_4(pos, active0), pos + 1);
}
private int jjMoveStringLiteralDfa0_4()
{
   switch(curChar)
   {
      case 9:
         return jjStopAtPos(0, 8);
      case 12:
         return jjStopAtPos(0, 10);
      case 32:
         return jjStopAtPos(0, 9);
      default :
         return jjMoveNfa_4(1, 0);
   }
}
private int jjMoveNfa_4(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 8;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 1:
                  if ((0x2400L & l) != 0L)
                  {
                     if (kind > 11)
                        kind = 11;
                  }
                  else if (curChar == 35)
                     jjCheckNAddStates(0, 2);
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 0;
                  break;
               case 0:
                  if (curChar == 10 && kind > 11)
                     kind = 11;
                  break;
               case 2:
                  if ((0x2400L & l) != 0L && kind > 11)
                     kind = 11;
                  break;
               case 3:
                  if (curChar == 35)
                     jjCheckNAddStates(0, 2);
                  break;
               case 4:
                  if ((0xffffffffffffdbffL & l) != 0L)
                     jjCheckNAddStates(0, 2);
                  break;
               case 5:
                  if (curChar == 10 && kind > 16)
                     kind = 16;
                  break;
               case 6:
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 5;
                  break;
               case 7:
                  if ((0x2400L & l) != 0L && kind > 16)
                     kind = 16;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 4:
                  jjAddStates(0, 2);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (int)(curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 4:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjAddStates(0, 2);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 8 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private int jjMoveStringLiteralDfa0_5()
{
   switch(curChar)
   {
      case 60:
         return jjMoveStringLiteralDfa1_5(0x4000L);
      default :
         return 1;
   }
}
private int jjMoveStringLiteralDfa1_5(long active0)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 1;
   }
   switch(curChar)
   {
      case 73:
         return jjMoveStringLiteralDfa2_5(active0, 0x4000L);
      default :
         return 2;
   }
}
private int jjMoveStringLiteralDfa2_5(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return 2;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 2;
   }
   switch(curChar)
   {
      case 78:
         return jjMoveStringLiteralDfa3_5(active0, 0x4000L);
      default :
         return 3;
   }
}
private int jjMoveStringLiteralDfa3_5(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return 3;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 3;
   }
   switch(curChar)
   {
      case 68:
         return jjMoveStringLiteralDfa4_5(active0, 0x4000L);
      default :
         return 4;
   }
}
private int jjMoveStringLiteralDfa4_5(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return 4;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 4;
   }
   switch(curChar)
   {
      case 69:
         return jjMoveStringLiteralDfa5_5(active0, 0x4000L);
      default :
         return 5;
   }
}
private int jjMoveStringLiteralDfa5_5(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return 5;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 5;
   }
   switch(curChar)
   {
      case 78:
         return jjMoveStringLiteralDfa6_5(active0, 0x4000L);
      default :
         return 6;
   }
}
private int jjMoveStringLiteralDfa6_5(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return 6;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 6;
   }
   switch(curChar)
   {
      case 84:
         return jjMoveStringLiteralDfa7_5(active0, 0x4000L);
      default :
         return 7;
   }
}
private int jjMoveStringLiteralDfa7_5(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return 7;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 7;
   }
   switch(curChar)
   {
      case 62:
         if ((active0 & 0x4000L) != 0L)
            return jjStopAtPos(7, 14);
         break;
      default :
         return 8;
   }
   return 8;
}
private int jjMoveStringLiteralDfa0_25()
{
   return 1;
}
private int jjMoveStringLiteralDfa0_27()
{
   return 1;
}
private final int jjStopStringLiteralDfa_17(int pos, long active0, long active1, long active2)
{
   switch (pos)
   {
      case 0:
         if ((active2 & 0x8000L) != 0L)
         {
            jjmatchedKind = 177;
            return -1;
         }
         return -1;
      case 1:
         if ((active2 & 0x8000L) != 0L)
         {
            if (jjmatchedPos == 0)
            {
               jjmatchedKind = 177;
               jjmatchedPos = 0;
            }
            return -1;
         }
         return -1;
      default :
         return -1;
   }
}
private final int jjStartNfa_17(int pos, long active0, long active1, long active2)
{
   return jjMoveNfa_17(jjStopStringLiteralDfa_17(pos, active0, active1, active2), pos + 1);
}
private int jjMoveStringLiteralDfa0_17()
{
   switch(curChar)
   {
      case 10:
         return jjStopAtPos(0, 175);
      case 13:
         jjmatchedKind = 176;
         return jjMoveStringLiteralDfa1_17(0x400000000000L);
      case 34:
         return jjMoveStringLiteralDfa1_17(0x8000L);
      default :
         return jjMoveNfa_17(0, 0);
   }
}
private int jjMoveStringLiteralDfa1_17(long active2)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_17(0, 0L, 0L, active2);
      return 1;
   }
   switch(curChar)
   {
      case 10:
         if ((active2 & 0x400000000000L) != 0L)
            return jjStopAtPos(1, 174);
         break;
      case 34:
         return jjMoveStringLiteralDfa2_17(active2, 0x8000L);
      default :
         break;
   }
   return jjStartNfa_17(0, 0L, 0L, active2);
}
private int jjMoveStringLiteralDfa2_17(long old2, long active2)
{
   if (((active2 &= old2)) == 0L)
      return jjStartNfa_17(0, 0L, 0L, old2);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_17(1, 0L, 0L, active2);
      return 2;
   }
   switch(curChar)
   {
      case 34:
         if ((active2 & 0x8000L) != 0L)
            return jjStopAtPos(2, 143);
         break;
      default :
         break;
   }
   return jjStartNfa_17(1, 0L, 0L, active2);
}
private int jjMoveNfa_17(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 3;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0xffffffffffffdbffL & l) != 0L && kind > 177)
                     kind = 177;
                  break;
               case 2:
                  if ((0xffffffffffffdbffL & l) != 0L && kind > 178)
                     kind = 178;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if (kind > 177)
                     kind = 177;
                  if (curChar == 92)
                     jjstateSet[jjnewStateCnt++] = 2;
                  break;
               case 1:
                  if (curChar == 92)
                     jjstateSet[jjnewStateCnt++] = 2;
                  break;
               case 2:
                  if (kind > 178)
                     kind = 178;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (int)(curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2) && kind > 177)
                     kind = 177;
                  break;
               case 2:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2) && kind > 178)
                     kind = 178;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 3 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private final int jjStopStringLiteralDfa_0(int pos, long active0, long active1)
{
   switch (pos)
   {
      case 0:
         if ((active1 & 0x1080000L) != 0L)
         {
            jjmatchedKind = 98;
            return 76;
         }
         if ((active0 & 0xc000000000000000L) != 0L || (active1 & 0x1beb57effL) != 0L)
         {
            jjmatchedKind = 98;
            return 10;
         }
         if ((active1 & 0x20000L) != 0L)
         {
            jjmatchedKind = 98;
            return 63;
         }
         if ((active1 & 0x40408100L) != 0L)
         {
            jjmatchedKind = 98;
            return 111;
         }
         if ((active0 & 0x2000000L) != 0L)
            return 154;
         return -1;
      case 1:
         if ((active0 & 0x4000000000000000L) != 0L || (active1 & 0x18001016L) != 0L)
            return 10;
         if ((active1 & 0x20000L) != 0L)
         {
            if (jjmatchedPos != 1)
            {
               jjmatchedKind = 98;
               jjmatchedPos = 1;
            }
            return 155;
         }
         if ((active0 & 0x8000000000000000L) != 0L || (active1 & 0x1e7bdefe9L) != 0L)
         {
            if (jjmatchedPos != 1)
            {
               jjmatchedKind = 98;
               jjmatchedPos = 1;
            }
            return 10;
         }
         if ((active1 & 0x400000L) != 0L)
         {
            if (jjmatchedPos != 1)
            {
               jjmatchedKind = 98;
               jjmatchedPos = 1;
            }
            return 156;
         }
         return -1;
      case 2:
         if ((active0 & 0x8000000000000000L) != 0L || (active1 & 0x800b01L) != 0L)
            return 10;
         if ((active1 & 0x1ef7ff4e8L) != 0L)
         {
            jjmatchedKind = 98;
            jjmatchedPos = 2;
            return 10;
         }
         return -1;
      case 3:
         if ((active1 & 0x1a0410060L) != 0L)
            return 10;
         if ((active1 & 0x4f3ef488L) != 0L)
         {
            jjmatchedKind = 98;
            jjmatchedPos = 3;
            return 10;
         }
         return -1;
      case 4:
         if ((active1 & 0x41127080L) != 0L)
            return 10;
         if ((active1 & 0xe2c8408L) != 0L)
         {
            jjmatchedKind = 98;
            jjmatchedPos = 4;
            return 10;
         }
         return -1;
      case 5:
         if ((active1 & 0xa280408L) != 0L)
            return 10;
         if ((active1 & 0x4048000L) != 0L)
         {
            jjmatchedKind = 98;
            jjmatchedPos = 5;
            return 10;
         }
         return -1;
      case 6:
         if ((active1 & 0x8000L) != 0L)
            return 10;
         if ((active1 & 0x4040000L) != 0L)
         {
            jjmatchedKind = 98;
            jjmatchedPos = 6;
            return 10;
         }
         return -1;
      default :
         return -1;
   }
}
private final int jjStartNfa_0(int pos, long active0, long active1)
{
   return jjMoveNfa_0(jjStopStringLiteralDfa_0(pos, active0, active1), pos + 1);
}
private int jjMoveStringLiteralDfa0_0()
{
   switch(curChar)
   {
      case 33:
         return jjMoveStringLiteralDfa1_0(0x800000000000L, 0x0L);
      case 37:
         jjmatchedKind = 36;
         return jjMoveStringLiteralDfa1_0(0x40000000000000L, 0x0L);
      case 38:
         jjmatchedKind = 40;
         return jjMoveStringLiteralDfa1_0(0x80000000000000L, 0x0L);
      case 40:
         return jjStopAtPos(0, 17);
      case 41:
         return jjStopAtPos(0, 18);
      case 42:
         jjmatchedKind = 30;
         return jjMoveStringLiteralDfa1_0(0x1004000200000000L, 0x0L);
      case 43:
         jjmatchedKind = 27;
         return jjMoveStringLiteralDfa1_0(0x1000000000000L, 0x0L);
      case 44:
         return jjStopAtPos(0, 24);
      case 45:
         jjmatchedKind = 28;
         return jjMoveStringLiteralDfa1_0(0x2000020000000L, 0x0L);
      case 46:
         return jjStartNfaWithStates_0(0, 25, 154);
      case 47:
         jjmatchedKind = 31;
         return jjMoveStringLiteralDfa1_0(0x30000100000000L, 0x0L);
      case 58:
         jjmatchedKind = 26;
         return jjMoveStringLiteralDfa1_0(0x2000000000000000L, 0x0L);
      case 59:
         return jjStopAtPos(0, 23);
      case 60:
         jjmatchedKind = 43;
         return jjMoveStringLiteralDfa1_0(0x400200400000000L, 0x0L);
      case 61:
         jjmatchedKind = 41;
         return jjMoveStringLiteralDfa1_0(0x100000000000L, 0x0L);
      case 62:
         jjmatchedKind = 42;
         return jjMoveStringLiteralDfa1_0(0x800400800000000L, 0x0L);
      case 64:
         jjmatchedKind = 97;
         return jjMoveStringLiteralDfa1_0(0x8000000000000L, 0x0L);
      case 70:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x40000000L);
      case 78:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x100000000L);
      case 84:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x80000000L);
      case 91:
         return jjStopAtPos(0, 21);
      case 93:
         return jjStopAtPos(0, 22);
      case 94:
         jjmatchedKind = 38;
         return jjMoveStringLiteralDfa1_0(0x200000000000000L, 0x0L);
      case 97:
         return jjMoveStringLiteralDfa1_0(0x8000000000000000L, 0x18003000L);
      case 98:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x20000L);
      case 99:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x44000L);
      case 100:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x800800L);
      case 101:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x460L);
      case 102:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x408100L);
      case 103:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x2000000L);
      case 105:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x200016L);
      case 108:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x8L);
      case 110:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x4000001L);
      case 111:
         return jjMoveStringLiteralDfa1_0(0x4000000000000000L, 0x0L);
      case 112:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x10000L);
      case 114:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x1080000L);
      case 116:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x200L);
      case 119:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x20000080L);
      case 121:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x100000L);
      case 123:
         return jjStopAtPos(0, 19);
      case 124:
         jjmatchedKind = 39;
         return jjMoveStringLiteralDfa1_0(0x100000000000000L, 0x0L);
      case 125:
         return jjStopAtPos(0, 20);
      case 126:
         return jjStopAtPos(0, 37);
      default :
         return jjMoveNfa_0(0, 0);
   }
}
private int jjMoveStringLiteralDfa1_0(long active0, long active1)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(0, active0, active1);
      return 1;
   }
   switch(curChar)
   {
      case 42:
         if ((active0 & 0x200000000L) != 0L)
         {
            jjmatchedKind = 33;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0x1000000000000000L, active1, 0L);
      case 47:
         if ((active0 & 0x100000000L) != 0L)
         {
            jjmatchedKind = 32;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0x20000000000000L, active1, 0L);
      case 60:
         if ((active0 & 0x400000000L) != 0L)
         {
            jjmatchedKind = 34;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0x400000000000000L, active1, 0L);
      case 61:
         if ((active0 & 0x100000000000L) != 0L)
            return jjStopAtPos(1, 44);
         else if ((active0 & 0x200000000000L) != 0L)
            return jjStopAtPos(1, 45);
         else if ((active0 & 0x400000000000L) != 0L)
            return jjStopAtPos(1, 46);
         else if ((active0 & 0x800000000000L) != 0L)
            return jjStopAtPos(1, 47);
         else if ((active0 & 0x1000000000000L) != 0L)
            return jjStopAtPos(1, 48);
         else if ((active0 & 0x2000000000000L) != 0L)
            return jjStopAtPos(1, 49);
         else if ((active0 & 0x4000000000000L) != 0L)
            return jjStopAtPos(1, 50);
         else if ((active0 & 0x8000000000000L) != 0L)
            return jjStopAtPos(1, 51);
         else if ((active0 & 0x10000000000000L) != 0L)
            return jjStopAtPos(1, 52);
         else if ((active0 & 0x40000000000000L) != 0L)
            return jjStopAtPos(1, 54);
         else if ((active0 & 0x80000000000000L) != 0L)
            return jjStopAtPos(1, 55);
         else if ((active0 & 0x100000000000000L) != 0L)
            return jjStopAtPos(1, 56);
         else if ((active0 & 0x200000000000000L) != 0L)
            return jjStopAtPos(1, 57);
         else if ((active0 & 0x2000000000000000L) != 0L)
            return jjStopAtPos(1, 61);
         break;
      case 62:
         if ((active0 & 0x20000000L) != 0L)
            return jjStopAtPos(1, 29);
         else if ((active0 & 0x800000000L) != 0L)
         {
            jjmatchedKind = 35;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0x800000000000000L, active1, 0L);
      case 97:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x41010008L);
      case 101:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x880800L);
      case 102:
         if ((active1 & 0x10L) != 0L)
            return jjStartNfaWithStates_0(1, 68, 10);
         break;
      case 104:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x80L);
      case 105:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x20108000L);
      case 108:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x2004060L);
      case 109:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x200000L);
      case 110:
         if ((active1 & 0x4L) != 0L)
            return jjStartNfaWithStates_0(1, 66, 10);
         return jjMoveStringLiteralDfa2_0(active0, 0x8000000000000000L, active1, 0L);
      case 111:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x104040101L);
      case 114:
         if ((active0 & 0x4000000000000000L) != 0L)
            return jjStartNfaWithStates_0(1, 62, 10);
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x80420200L);
      case 115:
         if ((active1 & 0x2L) != 0L)
            return jjStartNfaWithStates_0(1, 65, 10);
         else if ((active1 & 0x10000000L) != 0L)
         {
            jjmatchedKind = 92;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x8001000L);
      case 119:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x2000L);
      case 120:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x400L);
      default :
         break;
   }
   return jjStartNfa_0(0, active0, active1);
}
private int jjMoveStringLiteralDfa2_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(0, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(1, active0, active1);
      return 2;
   }
   switch(curChar)
   {
      case 61:
         if ((active0 & 0x20000000000000L) != 0L)
            return jjStopAtPos(2, 53);
         else if ((active0 & 0x400000000000000L) != 0L)
            return jjStopAtPos(2, 58);
         else if ((active0 & 0x800000000000000L) != 0L)
            return jjStopAtPos(2, 59);
         else if ((active0 & 0x1000000000000000L) != 0L)
            return jjStopAtPos(2, 60);
         break;
      case 97:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x6000L);
      case 99:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x400L);
      case 100:
         if ((active0 & 0x8000000000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 63, 10);
         break;
      case 101:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x120000L);
      case 102:
         if ((active1 & 0x800L) != 0L)
            return jjStartNfaWithStates_0(2, 75, 10);
         break;
      case 105:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x10000c0L);
      case 108:
         if ((active1 & 0x800000L) != 0L)
            return jjStartNfaWithStates_0(2, 87, 10);
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x40000000L);
      case 109:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x8L);
      case 110:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x104048000L);
      case 111:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x2400000L);
      case 112:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x200000L);
      case 114:
         if ((active1 & 0x100L) != 0L)
            return jjStartNfaWithStates_0(2, 72, 10);
         break;
      case 115:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x8010020L);
      case 116:
         if ((active1 & 0x1L) != 0L)
            return jjStartNfaWithStates_0(2, 64, 10);
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x20080000L);
      case 117:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x80000000L);
      case 121:
         if ((active1 & 0x200L) != 0L)
            return jjStartNfaWithStates_0(2, 73, 10);
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x1000L);
      default :
         break;
   }
   return jjStartNfa_0(1, active0, active1);
}
private int jjMoveStringLiteralDfa3_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(1, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(2, 0L, active1);
      return 3;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa4_0(active1, 0x28000L);
      case 98:
         return jjMoveStringLiteralDfa4_0(active1, 0x2000008L);
      case 101:
         if ((active1 & 0x20L) != 0L)
            return jjStartNfaWithStates_0(3, 69, 10);
         else if ((active1 & 0x80000000L) != 0L)
            return jjStartNfaWithStates_0(3, 95, 10);
         else if ((active1 & 0x100000000L) != 0L)
            return jjStartNfaWithStates_0(3, 96, 10);
         return jjMoveStringLiteralDfa4_0(active1, 0x8000400L);
      case 102:
         if ((active1 & 0x40L) != 0L)
            return jjStartNfaWithStates_0(3, 70, 10);
         break;
      case 104:
         if ((active1 & 0x20000000L) != 0L)
            return jjStartNfaWithStates_0(3, 93, 10);
         break;
      case 105:
         return jjMoveStringLiteralDfa4_0(active1, 0x2000L);
      case 108:
         return jjMoveStringLiteralDfa4_0(active1, 0x4100080L);
      case 109:
         if ((active1 & 0x400000L) != 0L)
            return jjStartNfaWithStates_0(3, 86, 10);
         break;
      case 110:
         return jjMoveStringLiteralDfa4_0(active1, 0x1000L);
      case 111:
         return jjMoveStringLiteralDfa4_0(active1, 0x200000L);
      case 115:
         if ((active1 & 0x10000L) != 0L)
            return jjStartNfaWithStates_0(3, 80, 10);
         return jjMoveStringLiteralDfa4_0(active1, 0x41004000L);
      case 116:
         return jjMoveStringLiteralDfa4_0(active1, 0x40000L);
      case 117:
         return jjMoveStringLiteralDfa4_0(active1, 0x80000L);
      default :
         break;
   }
   return jjStartNfa_0(2, 0L, active1);
}
private int jjMoveStringLiteralDfa4_0(long old1, long active1)
{
   if (((active1 &= old1)) == 0L)
      return jjStartNfa_0(2, 0L, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(3, 0L, active1);
      return 4;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa5_0(active1, 0x2000000L);
      case 99:
         if ((active1 & 0x1000L) != 0L)
            return jjStartNfaWithStates_0(4, 76, 10);
         break;
      case 100:
         if ((active1 & 0x100000L) != 0L)
            return jjStartNfaWithStates_0(4, 84, 10);
         return jjMoveStringLiteralDfa5_0(active1, 0x8L);
      case 101:
         if ((active1 & 0x80L) != 0L)
            return jjStartNfaWithStates_0(4, 71, 10);
         else if ((active1 & 0x1000000L) != 0L)
            return jjStartNfaWithStates_0(4, 88, 10);
         else if ((active1 & 0x40000000L) != 0L)
            return jjStartNfaWithStates_0(4, 94, 10);
         break;
      case 105:
         return jjMoveStringLiteralDfa5_0(active1, 0x40000L);
      case 107:
         if ((active1 & 0x20000L) != 0L)
            return jjStartNfaWithStates_0(4, 81, 10);
         break;
      case 108:
         return jjMoveStringLiteralDfa5_0(active1, 0x8000L);
      case 111:
         return jjMoveStringLiteralDfa5_0(active1, 0x4000000L);
      case 112:
         return jjMoveStringLiteralDfa5_0(active1, 0x400L);
      case 114:
         return jjMoveStringLiteralDfa5_0(active1, 0x8280000L);
      case 115:
         if ((active1 & 0x4000L) != 0L)
            return jjStartNfaWithStates_0(4, 78, 10);
         break;
      case 116:
         if ((active1 & 0x2000L) != 0L)
            return jjStartNfaWithStates_0(4, 77, 10);
         break;
      default :
         break;
   }
   return jjStartNfa_0(3, 0L, active1);
}
private int jjMoveStringLiteralDfa5_0(long old1, long active1)
{
   if (((active1 &= old1)) == 0L)
      return jjStartNfa_0(3, 0L, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(4, 0L, active1);
      return 5;
   }
   switch(curChar)
   {
      case 97:
         if ((active1 & 0x8L) != 0L)
            return jjStartNfaWithStates_0(5, 67, 10);
         break;
      case 99:
         return jjMoveStringLiteralDfa6_0(active1, 0x4000000L);
      case 108:
         if ((active1 & 0x2000000L) != 0L)
            return jjStartNfaWithStates_0(5, 89, 10);
         return jjMoveStringLiteralDfa6_0(active1, 0x8000L);
      case 110:
         if ((active1 & 0x80000L) != 0L)
            return jjStartNfaWithStates_0(5, 83, 10);
         return jjMoveStringLiteralDfa6_0(active1, 0x40000L);
      case 116:
         if ((active1 & 0x400L) != 0L)
            return jjStartNfaWithStates_0(5, 74, 10);
         else if ((active1 & 0x200000L) != 0L)
            return jjStartNfaWithStates_0(5, 85, 10);
         else if ((active1 & 0x8000000L) != 0L)
            return jjStartNfaWithStates_0(5, 91, 10);
         break;
      default :
         break;
   }
   return jjStartNfa_0(4, 0L, active1);
}
private int jjMoveStringLiteralDfa6_0(long old1, long active1)
{
   if (((active1 &= old1)) == 0L)
      return jjStartNfa_0(4, 0L, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(5, 0L, active1);
      return 6;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa7_0(active1, 0x4000000L);
      case 117:
         return jjMoveStringLiteralDfa7_0(active1, 0x40000L);
      case 121:
         if ((active1 & 0x8000L) != 0L)
            return jjStartNfaWithStates_0(6, 79, 10);
         break;
      default :
         break;
   }
   return jjStartNfa_0(5, 0L, active1);
}
private int jjMoveStringLiteralDfa7_0(long old1, long active1)
{
   if (((active1 &= old1)) == 0L)
      return jjStartNfa_0(5, 0L, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(6, 0L, active1);
      return 7;
   }
   switch(curChar)
   {
      case 101:
         if ((active1 & 0x40000L) != 0L)
            return jjStartNfaWithStates_0(7, 82, 10);
         break;
      case 108:
         if ((active1 & 0x4000000L) != 0L)
            return jjStartNfaWithStates_0(7, 90, 10);
         break;
      default :
         break;
   }
   return jjStartNfa_0(6, 0L, active1);
}
private int jjStartNfaWithStates_0(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_0(state, pos + 1);
}
private int jjMoveNfa_0(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 154;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 156:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 98)
                        kind = 98;
                     jjCheckNAdd(10);
                  }
                  else if (curChar == 34)
                     jjstateSet[jjnewStateCnt++] = 121;
                  else if (curChar == 39)
                     jjstateSet[jjnewStateCnt++] = 117;
                  if (curChar == 34)
                  {
                     if (kind > 121)
                        kind = 121;
                  }
                  else if (curChar == 39)
                  {
                     if (kind > 120)
                        kind = 120;
                  }
                  break;
               case 111:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 98)
                        kind = 98;
                     jjCheckNAdd(10);
                  }
                  else if (curChar == 34)
                     jjstateSet[jjnewStateCnt++] = 121;
                  else if (curChar == 39)
                     jjstateSet[jjnewStateCnt++] = 117;
                  if (curChar == 34)
                  {
                     if (kind > 121)
                        kind = 121;
                  }
                  else if (curChar == 39)
                  {
                     if (kind > 120)
                        kind = 120;
                  }
                  break;
               case 76:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 98)
                        kind = 98;
                     jjCheckNAdd(10);
                  }
                  else if (curChar == 34)
                     jjCheckNAdd(106);
                  else if (curChar == 39)
                     jjCheckNAdd(103);
                  if (curChar == 34)
                  {
                     if (kind > 129)
                        kind = 129;
                  }
                  else if (curChar == 39)
                  {
                     if (kind > 128)
                        kind = 128;
                  }
                  break;
               case 154:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(5, 8);
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 104)
                        kind = 104;
                     jjCheckNAddStates(9, 11);
                  }
                  break;
               case 155:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 98)
                        kind = 98;
                     jjCheckNAdd(10);
                  }
                  else if (curChar == 34)
                     jjstateSet[jjnewStateCnt++] = 73;
                  else if (curChar == 39)
                     jjstateSet[jjnewStateCnt++] = 69;
                  if (curChar == 34)
                  {
                     if (kind > 113)
                        kind = 113;
                  }
                  else if (curChar == 39)
                  {
                     if (kind > 112)
                        kind = 112;
                  }
                  break;
               case 0:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(12, 23);
                  else if ((0x2400L & l) != 0L)
                  {
                     if (kind > 5)
                        kind = 5;
                  }
                  else if (curChar == 34)
                     jjCheckNAddStates(24, 26);
                  else if (curChar == 39)
                     jjCheckNAddStates(27, 29);
                  else if (curChar == 46)
                     jjCheckNAddTwoStates(37, 43);
                  else if (curChar == 35)
                  {
                     if (kind > 15)
                        kind = 15;
                     jjCheckNAdd(8);
                  }
                  if ((0x3fe000000000000L & l) != 0L)
                  {
                     if (kind > 100)
                        kind = 100;
                     jjCheckNAddStates(30, 36);
                  }
                  else if (curChar == 34)
                  {
                     if (kind > 117)
                        kind = 117;
                  }
                  else if (curChar == 39)
                  {
                     if (kind > 116)
                        kind = 116;
                  }
                  else if (curChar == 48)
                  {
                     if (kind > 100)
                        kind = 100;
                     jjCheckNAddStates(37, 45);
                  }
                  else if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 4;
                  break;
               case 63:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 98)
                        kind = 98;
                     jjCheckNAdd(10);
                  }
                  else if (curChar == 34)
                     jjstateSet[jjnewStateCnt++] = 73;
                  else if (curChar == 39)
                     jjstateSet[jjnewStateCnt++] = 69;
                  if (curChar == 34)
                  {
                     if (kind > 113)
                        kind = 113;
                  }
                  else if (curChar == 39)
                  {
                     if (kind > 112)
                        kind = 112;
                  }
                  break;
               case 1:
                  if (curChar == 10 && kind > 4)
                     kind = 4;
                  break;
               case 2:
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 1;
                  break;
               case 3:
                  if ((0x2400L & l) != 0L && kind > 4)
                     kind = 4;
                  break;
               case 4:
                  if (curChar == 10 && kind > 5)
                     kind = 5;
                  break;
               case 5:
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 4;
                  break;
               case 6:
                  if ((0x2400L & l) != 0L && kind > 5)
                     kind = 5;
                  break;
               case 7:
                  if (curChar != 35)
                     break;
                  if (kind > 15)
                     kind = 15;
                  jjCheckNAdd(8);
                  break;
               case 8:
                  if ((0xffffffffffffdbffL & l) == 0L)
                     break;
                  if (kind > 15)
                     kind = 15;
                  jjCheckNAdd(8);
                  break;
               case 10:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 98)
                     kind = 98;
                  jjCheckNAdd(10);
                  break;
               case 11:
                  if ((0x3fe000000000000L & l) == 0L)
                     break;
                  if (kind > 100)
                     kind = 100;
                  jjCheckNAddStates(30, 36);
                  break;
               case 13:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 100)
                     kind = 100;
                  jjCheckNAddStates(46, 48);
                  break;
               case 16:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(49, 52);
                  break;
               case 19:
                  if (curChar != 48)
                     break;
                  if (kind > 100)
                     kind = 100;
                  jjCheckNAddStates(37, 45);
                  break;
               case 22:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 101)
                     kind = 101;
                  jjAddStates(53, 55);
                  break;
               case 26:
                  if ((0xff000000000000L & l) == 0L)
                     break;
                  if (kind > 102)
                     kind = 102;
                  jjAddStates(56, 58);
                  break;
               case 30:
                  if ((0x3000000000000L & l) == 0L)
                     break;
                  if (kind > 103)
                     kind = 103;
                  jjCheckNAddStates(59, 61);
                  break;
               case 32:
                  if ((0x3fe000000000000L & l) != 0L)
                     jjCheckNAddStates(62, 65);
                  break;
               case 34:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(62, 65);
                  break;
               case 35:
                  if (curChar == 48)
                     jjCheckNAdd(18);
                  break;
               case 36:
                  if (curChar == 46)
                     jjCheckNAddTwoStates(37, 43);
                  break;
               case 37:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 104)
                     kind = 104;
                  jjCheckNAddStates(9, 11);
                  break;
               case 40:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(41);
                  break;
               case 41:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 104)
                     kind = 104;
                  jjCheckNAddTwoStates(42, 41);
                  break;
               case 43:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(5, 8);
                  break;
               case 46:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(47);
                  break;
               case 47:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(66, 68);
                  break;
               case 51:
                  if (curChar == 39 && kind > 108)
                     kind = 108;
                  break;
               case 53:
                  if (curChar == 34 && kind > 109)
                     kind = 109;
                  break;
               case 55:
                  if (curChar == 39 && kind > 110)
                     kind = 110;
                  break;
               case 56:
                  if (curChar == 39)
                     jjstateSet[jjnewStateCnt++] = 55;
                  break;
               case 57:
                  if (curChar == 39)
                     jjstateSet[jjnewStateCnt++] = 56;
                  break;
               case 59:
                  if (curChar == 34 && kind > 111)
                     kind = 111;
                  break;
               case 60:
                  if (curChar == 34)
                     jjstateSet[jjnewStateCnt++] = 59;
                  break;
               case 61:
                  if (curChar == 34)
                     jjstateSet[jjnewStateCnt++] = 60;
                  break;
               case 64:
                  if (curChar == 39 && kind > 112)
                     kind = 112;
                  break;
               case 66:
                  if (curChar == 34 && kind > 113)
                     kind = 113;
                  break;
               case 68:
                  if (curChar == 39 && kind > 114)
                     kind = 114;
                  break;
               case 69:
                  if (curChar == 39)
                     jjstateSet[jjnewStateCnt++] = 68;
                  break;
               case 70:
                  if (curChar == 39)
                     jjstateSet[jjnewStateCnt++] = 69;
                  break;
               case 72:
                  if (curChar == 34 && kind > 115)
                     kind = 115;
                  break;
               case 73:
                  if (curChar == 34)
                     jjstateSet[jjnewStateCnt++] = 72;
                  break;
               case 74:
                  if (curChar == 34)
                     jjstateSet[jjnewStateCnt++] = 73;
                  break;
               case 77:
                  if (curChar == 39 && kind > 116)
                     kind = 116;
                  break;
               case 79:
                  if (curChar == 34 && kind > 117)
                     kind = 117;
                  break;
               case 81:
                  if (curChar == 39 && kind > 118)
                     kind = 118;
                  break;
               case 82:
                  if (curChar == 39)
                     jjstateSet[jjnewStateCnt++] = 81;
                  break;
               case 83:
                  if (curChar == 39)
                     jjCheckNAdd(82);
                  break;
               case 85:
                  if (curChar == 34 && kind > 119)
                     kind = 119;
                  break;
               case 86:
                  if (curChar == 34)
                     jjstateSet[jjnewStateCnt++] = 85;
                  break;
               case 87:
                  if (curChar == 34)
                     jjCheckNAdd(86);
                  break;
               case 89:
                  if (curChar == 39 && kind > 124)
                     kind = 124;
                  break;
               case 91:
                  if (curChar == 34 && kind > 125)
                     kind = 125;
                  break;
               case 93:
                  if (curChar == 39 && kind > 126)
                     kind = 126;
                  break;
               case 94:
                  if (curChar == 39)
                     jjstateSet[jjnewStateCnt++] = 93;
                  break;
               case 95:
                  if (curChar == 39)
                     jjCheckNAdd(94);
                  break;
               case 97:
                  if (curChar == 34 && kind > 127)
                     kind = 127;
                  break;
               case 98:
                  if (curChar == 34)
                     jjstateSet[jjnewStateCnt++] = 97;
                  break;
               case 99:
                  if (curChar == 34)
                     jjCheckNAdd(98);
                  break;
               case 100:
                  if (curChar == 39 && kind > 128)
                     kind = 128;
                  break;
               case 101:
                  if (curChar == 34 && kind > 129)
                     kind = 129;
                  break;
               case 102:
                  if (curChar == 39 && kind > 130)
                     kind = 130;
                  break;
               case 103:
                  if (curChar == 39)
                     jjstateSet[jjnewStateCnt++] = 102;
                  break;
               case 104:
                  if (curChar == 39)
                     jjCheckNAdd(103);
                  break;
               case 105:
                  if (curChar == 34 && kind > 131)
                     kind = 131;
                  break;
               case 106:
                  if (curChar == 34)
                     jjstateSet[jjnewStateCnt++] = 105;
                  break;
               case 107:
                  if (curChar == 34)
                     jjCheckNAdd(106);
                  break;
               case 108:
                  if (curChar == 39)
                     jjCheckNAddStates(27, 29);
                  break;
               case 109:
                  if (curChar == 34)
                     jjCheckNAddStates(24, 26);
                  break;
               case 112:
                  if (curChar == 39 && kind > 120)
                     kind = 120;
                  break;
               case 114:
                  if (curChar == 34 && kind > 121)
                     kind = 121;
                  break;
               case 116:
                  if (curChar == 39 && kind > 122)
                     kind = 122;
                  break;
               case 117:
                  if (curChar == 39)
                     jjstateSet[jjnewStateCnt++] = 116;
                  break;
               case 118:
                  if (curChar == 39)
                     jjstateSet[jjnewStateCnt++] = 117;
                  break;
               case 120:
                  if (curChar == 34 && kind > 123)
                     kind = 123;
                  break;
               case 121:
                  if (curChar == 34)
                     jjstateSet[jjnewStateCnt++] = 120;
                  break;
               case 122:
                  if (curChar == 34)
                     jjstateSet[jjnewStateCnt++] = 121;
                  break;
               case 123:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(12, 23);
                  break;
               case 125:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(69, 71);
                  break;
               case 126:
                  if (curChar != 46)
                     break;
                  if (kind > 104)
                     kind = 104;
                  jjCheckNAddStates(72, 74);
                  break;
               case 128:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 104)
                     kind = 104;
                  jjCheckNAddStates(72, 74);
                  break;
               case 130:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(131);
                  break;
               case 131:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 104)
                     kind = 104;
                  jjCheckNAddTwoStates(132, 131);
                  break;
               case 134:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(75, 77);
                  break;
               case 136:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(137);
                  break;
               case 137:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 104)
                     kind = 104;
                  jjCheckNAddTwoStates(138, 137);
                  break;
               case 140:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(78, 80);
                  break;
               case 142:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(143);
                  break;
               case 143:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(81, 83);
                  break;
               case 146:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(84, 86);
                  break;
               case 147:
                  if (curChar == 46)
                     jjCheckNAddStates(87, 90);
                  break;
               case 149:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(87, 90);
                  break;
               case 151:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(152);
                  break;
               case 152:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(91, 93);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 156:
               case 10:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 98)
                     kind = 98;
                  jjCheckNAdd(10);
                  break;
               case 111:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 98)
                        kind = 98;
                     jjCheckNAdd(10);
                  }
                  if ((0x4000000040000L & l) != 0L)
                     jjCheckNAdd(122);
                  if ((0x4000000040000L & l) != 0L)
                     jjCheckNAdd(118);
                  if ((0x4000000040000L & l) != 0L)
                     jjCheckNAdd(114);
                  if ((0x4000000040000L & l) != 0L)
                     jjCheckNAdd(112);
                  break;
               case 76:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 98)
                        kind = 98;
                     jjCheckNAdd(10);
                  }
                  if ((0x4000000040L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 99;
                  else if ((0x400000004L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 87;
                  if ((0x4000000040L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 95;
                  else if ((0x400000004L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 83;
                  if ((0x4000000040L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 91;
                  else if ((0x400000004L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 79;
                  if ((0x4000000040L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 89;
                  else if ((0x400000004L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 77;
                  break;
               case 155:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 98)
                     kind = 98;
                  jjCheckNAdd(10);
                  break;
               case 0:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 98)
                        kind = 98;
                     jjCheckNAdd(10);
                  }
                  else if (curChar == 92)
                     jjAddStates(3, 4);
                  if ((0x4000000040L & l) != 0L)
                     jjCheckNAddStates(94, 101);
                  else if ((0x4000000040000L & l) != 0L)
                     jjAddStates(102, 113);
                  else if ((0x400000004L & l) != 0L)
                     jjCheckNAddStates(114, 121);
                  else if ((0x20000000200000L & l) != 0L)
                     jjCheckNAddStates(122, 129);
                  break;
               case 63:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 98)
                        kind = 98;
                     jjCheckNAdd(10);
                  }
                  if ((0x4000000040000L & l) != 0L)
                     jjCheckNAdd(74);
                  if ((0x4000000040000L & l) != 0L)
                     jjCheckNAdd(70);
                  if ((0x4000000040000L & l) != 0L)
                     jjCheckNAdd(66);
                  if ((0x4000000040000L & l) != 0L)
                     jjCheckNAdd(64);
                  break;
               case 8:
                  if (kind > 15)
                     kind = 15;
                  jjstateSet[jjnewStateCnt++] = 8;
                  break;
               case 9:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 98)
                     kind = 98;
                  jjCheckNAdd(10);
                  break;
               case 12:
                  if (curChar == 95)
                     jjstateSet[jjnewStateCnt++] = 13;
                  break;
               case 14:
                  if ((0x100000001000L & l) != 0L && kind > 100)
                     kind = 100;
                  break;
               case 15:
                  if (curChar == 95)
                     jjstateSet[jjnewStateCnt++] = 16;
                  break;
               case 17:
                  if ((0x100000001000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 18;
                  break;
               case 18:
                  if ((0x40000000400L & l) != 0L && kind > 105)
                     kind = 105;
                  break;
               case 20:
                  if ((0x100000001000000L & l) != 0L)
                     jjCheckNAddTwoStates(21, 22);
                  break;
               case 21:
                  if (curChar == 95)
                     jjCheckNAdd(22);
                  break;
               case 22:
                  if ((0x7e0000007eL & l) == 0L)
                     break;
                  if (kind > 101)
                     kind = 101;
                  jjCheckNAddStates(53, 55);
                  break;
               case 23:
                  if ((0x100000001000L & l) != 0L && kind > 101)
                     kind = 101;
                  break;
               case 24:
                  if ((0x800000008000L & l) == 0L)
                     break;
                  if (kind > 102)
                     kind = 102;
                  jjCheckNAddStates(56, 58);
                  break;
               case 25:
                  if (curChar == 95)
                     jjCheckNAdd(26);
                  break;
               case 27:
                  if ((0x100000001000L & l) != 0L && kind > 102)
                     kind = 102;
                  break;
               case 28:
                  if ((0x400000004L & l) == 0L)
                     break;
                  if (kind > 103)
                     kind = 103;
                  jjCheckNAddStates(59, 61);
                  break;
               case 29:
                  if (curChar == 95)
                     jjCheckNAdd(30);
                  break;
               case 31:
                  if ((0x100000001000L & l) != 0L && kind > 103)
                     kind = 103;
                  break;
               case 33:
                  if (curChar == 95)
                     jjstateSet[jjnewStateCnt++] = 34;
                  break;
               case 38:
                  if (curChar == 95)
                     jjstateSet[jjnewStateCnt++] = 37;
                  break;
               case 39:
                  if ((0x2000000020L & l) != 0L)
                     jjCheckNAddTwoStates(40, 41);
                  break;
               case 42:
                  if (curChar == 95)
                     jjCheckNAdd(41);
                  break;
               case 44:
                  if (curChar == 95)
                     jjstateSet[jjnewStateCnt++] = 43;
                  break;
               case 45:
                  if ((0x2000000020L & l) != 0L)
                     jjCheckNAddTwoStates(46, 47);
                  break;
               case 48:
                  if (curChar == 95)
                     jjCheckNAdd(47);
                  break;
               case 49:
                  if ((0x20000000200000L & l) != 0L)
                     jjCheckNAddStates(122, 129);
                  break;
               case 50:
                  if ((0x4000000040000L & l) != 0L)
                     jjCheckNAdd(51);
                  break;
               case 52:
                  if ((0x4000000040000L & l) != 0L)
                     jjCheckNAdd(53);
                  break;
               case 54:
                  if ((0x4000000040000L & l) != 0L)
                     jjCheckNAdd(57);
                  break;
               case 58:
                  if ((0x4000000040000L & l) != 0L)
                     jjCheckNAdd(61);
                  break;
               case 62:
                  if ((0x400000004L & l) != 0L)
                     jjCheckNAddStates(114, 121);
                  break;
               case 65:
                  if ((0x4000000040000L & l) != 0L)
                     jjCheckNAdd(66);
                  break;
               case 67:
                  if ((0x4000000040000L & l) != 0L)
                     jjCheckNAdd(70);
                  break;
               case 71:
                  if ((0x4000000040000L & l) != 0L)
                     jjCheckNAdd(74);
                  break;
               case 75:
                  if ((0x4000000040000L & l) != 0L)
                     jjAddStates(102, 113);
                  break;
               case 78:
                  if ((0x400000004L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 79;
                  break;
               case 80:
                  if ((0x400000004L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 83;
                  break;
               case 84:
                  if ((0x400000004L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 87;
                  break;
               case 88:
                  if ((0x4000000040L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 89;
                  break;
               case 90:
                  if ((0x4000000040L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 91;
                  break;
               case 92:
                  if ((0x4000000040L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 95;
                  break;
               case 96:
                  if ((0x4000000040L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 99;
                  break;
               case 110:
                  if ((0x4000000040L & l) != 0L)
                     jjCheckNAddStates(94, 101);
                  break;
               case 113:
                  if ((0x4000000040000L & l) != 0L)
                     jjCheckNAdd(114);
                  break;
               case 115:
                  if ((0x4000000040000L & l) != 0L)
                     jjCheckNAdd(118);
                  break;
               case 119:
                  if ((0x4000000040000L & l) != 0L)
                     jjCheckNAdd(122);
                  break;
               case 124:
                  if (curChar == 95)
                     jjstateSet[jjnewStateCnt++] = 125;
                  break;
               case 127:
                  if (curChar == 95)
                     jjstateSet[jjnewStateCnt++] = 128;
                  break;
               case 129:
                  if ((0x2000000020L & l) != 0L)
                     jjCheckNAddTwoStates(130, 131);
                  break;
               case 132:
                  if (curChar == 95)
                     jjCheckNAdd(131);
                  break;
               case 133:
                  if (curChar == 95)
                     jjstateSet[jjnewStateCnt++] = 134;
                  break;
               case 135:
                  if ((0x2000000020L & l) != 0L)
                     jjCheckNAddTwoStates(136, 137);
                  break;
               case 138:
                  if (curChar == 95)
                     jjCheckNAdd(137);
                  break;
               case 139:
                  if (curChar == 95)
                     jjstateSet[jjnewStateCnt++] = 140;
                  break;
               case 141:
                  if ((0x2000000020L & l) != 0L)
                     jjCheckNAddTwoStates(142, 143);
                  break;
               case 144:
                  if (curChar == 95)
                     jjCheckNAdd(143);
                  break;
               case 145:
                  if (curChar == 95)
                     jjstateSet[jjnewStateCnt++] = 146;
                  break;
               case 148:
                  if (curChar == 95)
                     jjstateSet[jjnewStateCnt++] = 149;
                  break;
               case 150:
                  if ((0x2000000020L & l) != 0L)
                     jjCheckNAddTwoStates(151, 152);
                  break;
               case 153:
                  if (curChar == 95)
                     jjCheckNAdd(152);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (int)(curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 156:
               case 10:
                  if (!jjCanMove_0(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 98)
                     kind = 98;
                  jjCheckNAdd(10);
                  break;
               case 111:
                  if (!jjCanMove_0(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 98)
                     kind = 98;
                  jjCheckNAdd(10);
                  break;
               case 76:
                  if (!jjCanMove_0(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 98)
                     kind = 98;
                  jjCheckNAdd(10);
                  break;
               case 155:
                  if (!jjCanMove_0(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 98)
                     kind = 98;
                  jjCheckNAdd(10);
                  break;
               case 0:
                  if (!jjCanMove_0(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 98)
                     kind = 98;
                  jjCheckNAdd(10);
                  break;
               case 63:
                  if (!jjCanMove_0(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 98)
                     kind = 98;
                  jjCheckNAdd(10);
                  break;
               case 8:
                  if (!jjCanMove_0(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 15)
                     kind = 15;
                  jjstateSet[jjnewStateCnt++] = 8;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 154 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private final int jjStopStringLiteralDfa_13(int pos, long active0, long active1, long active2)
{
   switch (pos)
   {
      case 0:
         if ((active2 & 0x800L) != 0L)
         {
            jjmatchedKind = 177;
            return -1;
         }
         return -1;
      case 1:
         if ((active2 & 0x800L) != 0L)
         {
            if (jjmatchedPos == 0)
            {
               jjmatchedKind = 177;
               jjmatchedPos = 0;
            }
            return -1;
         }
         return -1;
      default :
         return -1;
   }
}
private final int jjStartNfa_13(int pos, long active0, long active1, long active2)
{
   return jjMoveNfa_13(jjStopStringLiteralDfa_13(pos, active0, active1, active2), pos + 1);
}
private int jjMoveStringLiteralDfa0_13()
{
   switch(curChar)
   {
      case 10:
         return jjStopAtPos(0, 175);
      case 13:
         jjmatchedKind = 176;
         return jjMoveStringLiteralDfa1_13(0x400000000000L);
      case 34:
         return jjMoveStringLiteralDfa1_13(0x800L);
      default :
         return jjMoveNfa_13(0, 0);
   }
}
private int jjMoveStringLiteralDfa1_13(long active2)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_13(0, 0L, 0L, active2);
      return 1;
   }
   switch(curChar)
   {
      case 10:
         if ((active2 & 0x400000000000L) != 0L)
            return jjStopAtPos(1, 174);
         break;
      case 34:
         return jjMoveStringLiteralDfa2_13(active2, 0x800L);
      default :
         break;
   }
   return jjStartNfa_13(0, 0L, 0L, active2);
}
private int jjMoveStringLiteralDfa2_13(long old2, long active2)
{
   if (((active2 &= old2)) == 0L)
      return jjStartNfa_13(0, 0L, 0L, old2);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_13(1, 0L, 0L, active2);
      return 2;
   }
   switch(curChar)
   {
      case 34:
         if ((active2 & 0x800L) != 0L)
            return jjStopAtPos(2, 139);
         break;
      default :
         break;
   }
   return jjStartNfa_13(1, 0L, 0L, active2);
}
private int jjMoveNfa_13(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 3;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0xffffffffffffdbffL & l) != 0L && kind > 177)
                     kind = 177;
                  break;
               case 2:
                  if ((0xffffffffffffdbffL & l) != 0L && kind > 178)
                     kind = 178;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if (kind > 177)
                     kind = 177;
                  if (curChar == 92)
                     jjstateSet[jjnewStateCnt++] = 2;
                  break;
               case 1:
                  if (curChar == 92)
                     jjstateSet[jjnewStateCnt++] = 2;
                  break;
               case 2:
                  if (kind > 178)
                     kind = 178;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (int)(curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2) && kind > 177)
                     kind = 177;
                  break;
               case 2:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2) && kind > 178)
                     kind = 178;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 3 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private final int jjStopStringLiteralDfa_15(int pos, long active0, long active1, long active2)
{
   switch (pos)
   {
      case 0:
         if ((active2 & 0x400000000L) != 0L)
         {
            jjmatchedKind = 173;
            return 2;
         }
         return -1;
      case 1:
         if ((active2 & 0x400000000L) != 0L)
         {
            jjmatchedKind = 163;
            jjmatchedPos = 1;
            return -1;
         }
         return -1;
      default :
         return -1;
   }
}
private final int jjStartNfa_15(int pos, long active0, long active1, long active2)
{
   return jjMoveNfa_15(jjStopStringLiteralDfa_15(pos, active0, active1, active2), pos + 1);
}
private int jjMoveStringLiteralDfa0_15()
{
   switch(curChar)
   {
      case 34:
         return jjStopAtPos(0, 141);
      case 92:
         return jjMoveStringLiteralDfa1_15(0x400000000L);
      default :
         return jjMoveNfa_15(0, 0);
   }
}
private int jjMoveStringLiteralDfa1_15(long active2)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_15(0, 0L, 0L, active2);
      return 1;
   }
   switch(curChar)
   {
      case 13:
         return jjMoveStringLiteralDfa2_15(active2, 0x400000000L);
      default :
         break;
   }
   return jjStartNfa_15(0, 0L, 0L, active2);
}
private int jjMoveStringLiteralDfa2_15(long old2, long active2)
{
   if (((active2 &= old2)) == 0L)
      return jjStartNfa_15(0, 0L, 0L, old2);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_15(1, 0L, 0L, active2);
      return 2;
   }
   switch(curChar)
   {
      case 10:
         if ((active2 & 0x400000000L) != 0L)
            return jjStopAtPos(2, 162);
         break;
      default :
         break;
   }
   return jjStartNfa_15(1, 0L, 0L, active2);
}
private int jjMoveNfa_15(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 4;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0xffffffffffffdbffL & l) != 0L && kind > 173)
                     kind = 173;
                  break;
               case 2:
                  if ((0x2400L & l) != 0L)
                  {
                     if (kind > 163)
                        kind = 163;
                  }
                  else if (curChar == 34)
                  {
                     if (kind > 173)
                        kind = 173;
                  }
                  break;
               case 3:
                  if (curChar == 34 && kind > 173)
                     kind = 173;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if (kind > 173)
                     kind = 173;
                  if (curChar == 92)
                     jjAddStates(3, 4);
                  break;
               case 2:
                  if (curChar == 92 && kind > 173)
                     kind = 173;
                  break;
               case 1:
                  if (curChar == 92)
                     jjAddStates(3, 4);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (int)(curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2) && kind > 173)
                     kind = 173;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 4 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private final int jjStopStringLiteralDfa_11(int pos, long active0, long active1, long active2)
{
   switch (pos)
   {
      case 0:
         if ((active2 & 0x40000000L) != 0L)
         {
            jjmatchedKind = 173;
            return 2;
         }
         return -1;
      case 1:
         if ((active2 & 0x40000000L) != 0L)
         {
            jjmatchedKind = 159;
            jjmatchedPos = 1;
            return -1;
         }
         return -1;
      default :
         return -1;
   }
}
private final int jjStartNfa_11(int pos, long active0, long active1, long active2)
{
   return jjMoveNfa_11(jjStopStringLiteralDfa_11(pos, active0, active1, active2), pos + 1);
}
private int jjMoveStringLiteralDfa0_11()
{
   switch(curChar)
   {
      case 34:
         return jjStopAtPos(0, 137);
      case 92:
         return jjMoveStringLiteralDfa1_11(0x40000000L);
      default :
         return jjMoveNfa_11(0, 0);
   }
}
private int jjMoveStringLiteralDfa1_11(long active2)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_11(0, 0L, 0L, active2);
      return 1;
   }
   switch(curChar)
   {
      case 13:
         return jjMoveStringLiteralDfa2_11(active2, 0x40000000L);
      default :
         break;
   }
   return jjStartNfa_11(0, 0L, 0L, active2);
}
private int jjMoveStringLiteralDfa2_11(long old2, long active2)
{
   if (((active2 &= old2)) == 0L)
      return jjStartNfa_11(0, 0L, 0L, old2);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_11(1, 0L, 0L, active2);
      return 2;
   }
   switch(curChar)
   {
      case 10:
         if ((active2 & 0x40000000L) != 0L)
            return jjStopAtPos(2, 158);
         break;
      default :
         break;
   }
   return jjStartNfa_11(1, 0L, 0L, active2);
}
private int jjMoveNfa_11(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 4;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0xffffffffffffdbffL & l) != 0L && kind > 173)
                     kind = 173;
                  break;
               case 2:
                  if ((0x2400L & l) != 0L)
                  {
                     if (kind > 159)
                        kind = 159;
                  }
                  else if (curChar == 34)
                  {
                     if (kind > 173)
                        kind = 173;
                  }
                  break;
               case 3:
                  if (curChar == 34 && kind > 173)
                     kind = 173;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if (kind > 173)
                     kind = 173;
                  if (curChar == 92)
                     jjAddStates(3, 4);
                  break;
               case 2:
                  if (curChar == 92 && kind > 173)
                     kind = 173;
                  break;
               case 1:
                  if (curChar == 92)
                     jjAddStates(3, 4);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (int)(curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2) && kind > 173)
                     kind = 173;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 4 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private final int jjStopStringLiteralDfa_8(int pos, long active0, long active1, long active2)
{
   switch (pos)
   {
      case 0:
         if ((active2 & 0x40L) != 0L)
         {
            jjmatchedKind = 177;
            return -1;
         }
         return -1;
      case 1:
         if ((active2 & 0x40L) != 0L)
         {
            if (jjmatchedPos == 0)
            {
               jjmatchedKind = 177;
               jjmatchedPos = 0;
            }
            return -1;
         }
         return -1;
      default :
         return -1;
   }
}
private final int jjStartNfa_8(int pos, long active0, long active1, long active2)
{
   return jjMoveNfa_8(jjStopStringLiteralDfa_8(pos, active0, active1, active2), pos + 1);
}
private int jjMoveStringLiteralDfa0_8()
{
   switch(curChar)
   {
      case 10:
         return jjStopAtPos(0, 175);
      case 13:
         jjmatchedKind = 176;
         return jjMoveStringLiteralDfa1_8(0x400000000000L);
      case 39:
         return jjMoveStringLiteralDfa1_8(0x40L);
      default :
         return jjMoveNfa_8(0, 0);
   }
}
private int jjMoveStringLiteralDfa1_8(long active2)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_8(0, 0L, 0L, active2);
      return 1;
   }
   switch(curChar)
   {
      case 10:
         if ((active2 & 0x400000000000L) != 0L)
            return jjStopAtPos(1, 174);
         break;
      case 39:
         return jjMoveStringLiteralDfa2_8(active2, 0x40L);
      default :
         break;
   }
   return jjStartNfa_8(0, 0L, 0L, active2);
}
private int jjMoveStringLiteralDfa2_8(long old2, long active2)
{
   if (((active2 &= old2)) == 0L)
      return jjStartNfa_8(0, 0L, 0L, old2);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_8(1, 0L, 0L, active2);
      return 2;
   }
   switch(curChar)
   {
      case 39:
         if ((active2 & 0x40L) != 0L)
            return jjStopAtPos(2, 134);
         break;
      default :
         break;
   }
   return jjStartNfa_8(1, 0L, 0L, active2);
}
private int jjMoveNfa_8(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 3;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0xffffffffffffdbffL & l) != 0L && kind > 177)
                     kind = 177;
                  break;
               case 2:
                  if ((0xffffffffffffdbffL & l) != 0L && kind > 178)
                     kind = 178;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if (kind > 177)
                     kind = 177;
                  if (curChar == 92)
                     jjstateSet[jjnewStateCnt++] = 2;
                  break;
               case 1:
                  if (curChar == 92)
                     jjstateSet[jjnewStateCnt++] = 2;
                  break;
               case 2:
                  if (kind > 178)
                     kind = 178;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (int)(curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2) && kind > 177)
                     kind = 177;
                  break;
               case 2:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2) && kind > 178)
                     kind = 178;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 3 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private int jjMoveStringLiteralDfa0_2()
{
   return jjMoveNfa_2(0, 0);
}
private int jjMoveNfa_2(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 1;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0x2400L & l) != 0L)
                     kind = 7;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (int)(curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 1 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private int jjMoveStringLiteralDfa0_1()
{
   return jjMoveNfa_1(0, 0);
}
private int jjMoveNfa_1(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 1;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0x2400L & l) != 0L)
                     kind = 6;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (int)(curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 1 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private final int jjStopStringLiteralDfa_6(int pos, long active0, long active1, long active2)
{
   switch (pos)
   {
      case 0:
         if ((active2 & 0x100000L) != 0L)
         {
            jjmatchedKind = 172;
            return 2;
         }
         return -1;
      case 1:
         if ((active2 & 0x100000L) != 0L)
         {
            jjmatchedKind = 149;
            jjmatchedPos = 1;
            return -1;
         }
         return -1;
      default :
         return -1;
   }
}
private final int jjStartNfa_6(int pos, long active0, long active1, long active2)
{
   return jjMoveNfa_6(jjStopStringLiteralDfa_6(pos, active0, active1, active2), pos + 1);
}
private int jjMoveStringLiteralDfa0_6()
{
   switch(curChar)
   {
      case 39:
         return jjStopAtPos(0, 132);
      case 92:
         return jjMoveStringLiteralDfa1_6(0x100000L);
      default :
         return jjMoveNfa_6(0, 0);
   }
}
private int jjMoveStringLiteralDfa1_6(long active2)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_6(0, 0L, 0L, active2);
      return 1;
   }
   switch(curChar)
   {
      case 13:
         return jjMoveStringLiteralDfa2_6(active2, 0x100000L);
      default :
         break;
   }
   return jjStartNfa_6(0, 0L, 0L, active2);
}
private int jjMoveStringLiteralDfa2_6(long old2, long active2)
{
   if (((active2 &= old2)) == 0L)
      return jjStartNfa_6(0, 0L, 0L, old2);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_6(1, 0L, 0L, active2);
      return 2;
   }
   switch(curChar)
   {
      case 10:
         if ((active2 & 0x100000L) != 0L)
            return jjStopAtPos(2, 148);
         break;
      default :
         break;
   }
   return jjStartNfa_6(1, 0L, 0L, active2);
}
private int jjMoveNfa_6(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 4;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0xffffffffffffdbffL & l) != 0L && kind > 172)
                     kind = 172;
                  break;
               case 2:
                  if ((0x2400L & l) != 0L)
                  {
                     if (kind > 149)
                        kind = 149;
                  }
                  else if (curChar == 39)
                  {
                     if (kind > 172)
                        kind = 172;
                  }
                  break;
               case 3:
                  if (curChar == 39 && kind > 172)
                     kind = 172;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if (kind > 172)
                     kind = 172;
                  if (curChar == 92)
                     jjAddStates(3, 4);
                  break;
               case 2:
                  if (curChar == 92 && kind > 172)
                     kind = 172;
                  break;
               case 1:
                  if (curChar == 92)
                     jjAddStates(3, 4);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (int)(curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2) && kind > 172)
                     kind = 172;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 4 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
static final int[] jjnextStates = {
   4, 6, 7, 2, 3, 44, 43, 45, 18, 38, 37, 39, 124, 125, 126, 133, 
   134, 135, 139, 140, 141, 145, 146, 147, 86, 98, 106, 82, 94, 103, 12, 13, 
   14, 15, 16, 17, 18, 20, 24, 28, 29, 30, 31, 32, 35, 18, 12, 13, 
   14, 15, 16, 17, 18, 21, 22, 23, 25, 26, 27, 29, 30, 31, 33, 34, 
   17, 18, 48, 47, 18, 124, 125, 126, 127, 128, 129, 133, 134, 135, 139, 140, 
   141, 144, 143, 18, 145, 146, 147, 148, 149, 150, 18, 153, 152, 18, 111, 112, 
   113, 114, 115, 118, 119, 122, 76, 78, 80, 84, 88, 90, 92, 96, 100, 101, 
   104, 107, 63, 64, 65, 66, 67, 70, 71, 74, 50, 51, 52, 53, 54, 57, 
   58, 61, 
};
private static final boolean jjCanMove_0(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 0:
         return ((jjbitVec2[i2] & l2) != 0L);
      default :
         if ((jjbitVec0[i1] & l1) != 0L)
            return true;
         return false;
   }
}

/** Token literal values. */
public static final String[] jjstrLiteralImages = {
"", null, null, null, null, null, null, null, null, null, null, null, null, 
null, "\74\111\116\104\105\116\124\76", null, null, "\50", "\51", "\173", "\175", 
"\133", "\135", "\73", "\54", "\56", "\72", "\53", "\55", "\55\76", "\52", "\57", 
"\57\57", "\52\52", "\74\74", "\76\76", "\45", "\176", "\136", "\174", "\46", "\75", 
"\76", "\74", "\75\75", "\74\75", "\76\75", "\41\75", "\53\75", "\55\75", "\52\75", 
"\100\75", "\57\75", "\57\57\75", "\45\75", "\46\75", "\174\75", "\136\75", "\74\74\75", 
"\76\76\75", "\52\52\75", "\72\75", "\157\162", "\141\156\144", "\156\157\164", "\151\163", 
"\151\156", "\154\141\155\142\144\141", "\151\146", "\145\154\163\145", 
"\145\154\151\146", "\167\150\151\154\145", "\146\157\162", "\164\162\171", 
"\145\170\143\145\160\164", "\144\145\146", "\141\163\171\156\143", "\141\167\141\151\164", 
"\143\154\141\163\163", "\146\151\156\141\154\154\171", "\160\141\163\163", "\142\162\145\141\153", 
"\143\157\156\164\151\156\165\145", "\162\145\164\165\162\156", "\171\151\145\154\144", 
"\151\155\160\157\162\164", "\146\162\157\155", "\144\145\154", "\162\141\151\163\145", 
"\147\154\157\142\141\154", "\156\157\156\154\157\143\141\154", "\141\163\163\145\162\164", "\141\163", 
"\167\151\164\150", "\106\141\154\163\145", "\124\162\165\145", "\116\157\156\145", "\100", null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, };

/** Lexer state names. */
public static final String[] lexStateNames = {
   "DEFAULT",
   "FORCE_NEWLINE1",
   "FORCE_NEWLINE2",
   "INDENTING",
   "INDENTATION_UNCHANGED",
   "UNREACHABLE",
   "IN_STRING11",
   "IN_STRING21",
   "IN_STRING13",
   "IN_STRING23",
   "IN_BSTRING11",
   "IN_BSTRING21",
   "IN_BSTRING13",
   "IN_BSTRING23",
   "IN_FSTRING11",
   "IN_FSTRING21",
   "IN_FSTRING13",
   "IN_FSTRING23",
   "IN_USTRING11",
   "IN_USTRING21",
   "IN_USTRING13",
   "IN_USTRING23",
   "IN_STRING1NLC",
   "IN_STRING2NLC",
   "IN_USTRING1NLC",
   "IN_USTRING2NLC",
   "IN_BSTRING1NLC",
   "IN_BSTRING2NLC",
   "IN_FSTRING1NLC",
   "IN_FSTRING2NLC",
};

/** Lex State array. */
public static final int[] jjnewLexState = {
   -1, -1, -1, -1, -1, -1, 4, 3, -1, -1, -1, -1, 0, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, 18, 19, 20, 21, 10, 11, 12, 13, 10, 11, 12, 13, 14, 15, 16, 17, 14, 
   15, 16, 17, 6, 7, 8, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 22, 22, 
   23, 23, 24, 24, 25, 25, 26, 26, 27, 27, 28, 28, 29, 29, 6, 7, 18, 19, 10, 11, 14, 15, -1, -1, -1, 
   -1, -1, -1, -1, 
};
static final long[] jjtoToken = {
   0xfffffffffffe60c1L, 0x3f7ffffffffL, 0xffff0L, 
};
static final long[] jjtoSkip = {
   0x19f3eL, 0x0L, 0x0L, 
};
static final long[] jjtoSpecial = {
   0x18000L, 0x0L, 0x0L, 
};
static final long[] jjtoMore = {
   0x0L, 0xfffff00000000000L, 0x7fffffff0000fL, 
};
private final FastCharStream input_stream;
private final int[] jjrounds = new int[154];
private final int[] jjstateSet = new int[308];
private final FastStringBuffer jjimage = new FastStringBuffer();
private FastStringBuffer image = jjimage;
private int jjimageLen;
private int lengthOfMatch;
protected char curChar;
/** Constructor. */
public PythonGrammar38TokenManager(FastCharStream stream){
   input_stream = stream;
}

/** Constructor. */
public PythonGrammar38TokenManager(FastCharStream stream, int lexState){
   this(stream);
   SwitchTo(lexState);
}

/** Reinitialise parser. */
//Removed Reinit}
private void ReInitRounds()
{
   int i;
   jjround = 0x80000001;
   for (i = 154; i-- > 0;)
      jjrounds[i] = 0x80000000;
}

/** Reinitialise parser. */
//Removed Reinit}

/** Switch to specified lex state. */
public void SwitchTo(int lexState)
{
   if (lexState >= 30 || lexState < 0)
      throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.INVALID_LEXICAL_STATE);
   else
      curLexState = lexState;
}

protected 
Token jjFillToken()
{
   final Token t;
   final String curTokenImage;
   if (jjmatchedPos < 0)
   {
      if (image == null)
         curTokenImage = "";
      else
         curTokenImage = image.toString();
      t = Token.newToken(jjmatchedKind, curTokenImage);
      t.beginLine = t.endLine = input_stream.bufline[input_stream.tokenBegin];
    t.beginColumn = t.endColumn = input_stream.bufcolumn[input_stream.tokenBegin];
   }
   else
   {
      String im = jjstrLiteralImages[jjmatchedKind];
      curTokenImage = (im == null) ? input_stream.GetImage() : im;
      t = Token.newToken(jjmatchedKind, curTokenImage);
      t.beginLine = input_stream.bufline[input_stream.tokenBegin];
    t.beginColumn = input_stream.bufcolumn[input_stream.tokenBegin];
    t.endLine = input_stream.bufline[input_stream.bufpos];
    t.endColumn = input_stream.bufcolumn[input_stream.bufpos];
      
   }

   return t;

}

int curLexState = 0;
int defaultLexState = 0;
int jjnewStateCnt;
int jjround;
int jjmatchedPos;
int jjmatchedKind;

/** Get the next Token. */
public Token getNextToken() 
{
  Token specialToken = null;
  Token matchedToken;
  int curPos = 0;

  EOFLoop :
  for (;;)
  {
   try
   {
      curChar = input_stream.BeginToken();
   }
   catch(java.io.IOException e)
   {
      jjmatchedKind = 0;
      matchedToken = jjFillToken();
      matchedToken.specialToken = specialToken;
      CommonTokenAction(matchedToken);
      return matchedToken;
   }
   image = jjimage;
   image.setLength(0);
   jjimageLen = 0;

   for (;;)
   {
     switch(curLexState)
     {
       case 0:
         try { input_stream.backup(0);
            while (curChar <= 32 && (0x100001200L & (1L << curChar)) != 0L)
               curChar = input_stream.BeginToken();
         }
         catch (java.io.IOException e1) { continue EOFLoop; }
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_0();
         break;
       case 1:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_1();
         break;
       case 2:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_2();
         break;
       case 3:
         jjmatchedKind = 13;
         jjmatchedPos = -1;
         curPos = 0;
         curPos = jjMoveStringLiteralDfa0_3();
         break;
       case 4:
         jjmatchedKind = 12;
         jjmatchedPos = -1;
         curPos = 0;
         curPos = jjMoveStringLiteralDfa0_4();
         break;
       case 5:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_5();
         break;
       case 6:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_6();
         break;
       case 7:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_7();
         break;
       case 8:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_8();
         break;
       case 9:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_9();
         break;
       case 10:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_10();
         break;
       case 11:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_11();
         break;
       case 12:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_12();
         break;
       case 13:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_13();
         break;
       case 14:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_14();
         break;
       case 15:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_15();
         break;
       case 16:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_16();
         break;
       case 17:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_17();
         break;
       case 18:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_18();
         break;
       case 19:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_19();
         break;
       case 20:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_20();
         break;
       case 21:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_21();
         break;
       case 22:
         jjmatchedKind = 164;
         jjmatchedPos = -1;
         curPos = 0;
         curPos = jjMoveStringLiteralDfa0_22();
         break;
       case 23:
         jjmatchedKind = 165;
         jjmatchedPos = -1;
         curPos = 0;
         curPos = jjMoveStringLiteralDfa0_23();
         break;
       case 24:
         jjmatchedKind = 166;
         jjmatchedPos = -1;
         curPos = 0;
         curPos = jjMoveStringLiteralDfa0_24();
         break;
       case 25:
         jjmatchedKind = 167;
         jjmatchedPos = -1;
         curPos = 0;
         curPos = jjMoveStringLiteralDfa0_25();
         break;
       case 26:
         jjmatchedKind = 168;
         jjmatchedPos = -1;
         curPos = 0;
         curPos = jjMoveStringLiteralDfa0_26();
         break;
       case 27:
         jjmatchedKind = 169;
         jjmatchedPos = -1;
         curPos = 0;
         curPos = jjMoveStringLiteralDfa0_27();
         break;
       case 28:
         jjmatchedKind = 170;
         jjmatchedPos = -1;
         curPos = 0;
         curPos = jjMoveStringLiteralDfa0_28();
         break;
       case 29:
         jjmatchedKind = 171;
         jjmatchedPos = -1;
         curPos = 0;
         curPos = jjMoveStringLiteralDfa0_29();
         break;
     }
     if (jjmatchedKind != 0x7fffffff)
     {
        if (jjmatchedPos + 1 < curPos)
           input_stream.backup(curPos - jjmatchedPos - 1);
        if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
        {
           matchedToken = jjFillToken();
           matchedToken.specialToken = specialToken;
           TokenLexicalActions(matchedToken);
       if (jjnewLexState[jjmatchedKind] != -1)
         curLexState = jjnewLexState[jjmatchedKind];
           CommonTokenAction(matchedToken);
           return matchedToken;
        }
        else if ((jjtoSkip[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
        {
           if ((jjtoSpecial[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
           {
              matchedToken = jjFillToken();
              if (specialToken == null)
                 specialToken = matchedToken;
              else
              {
                 matchedToken.specialToken = specialToken;
                 specialToken = (specialToken.next = matchedToken);
              }
              SkipLexicalActions(matchedToken);
           }
           else
              SkipLexicalActions(null);
         if (jjnewLexState[jjmatchedKind] != -1)
           curLexState = jjnewLexState[jjmatchedKind];
           continue EOFLoop;
        }
        MoreLexicalActions();
      if (jjnewLexState[jjmatchedKind] != -1)
        curLexState = jjnewLexState[jjmatchedKind];
        curPos = 0;
        jjmatchedKind = 0x7fffffff;
        try {
           curChar = input_stream.readChar();
           continue;
        }
        catch (java.io.IOException e1) { }
     }
     int error_line = input_stream.getEndLine();
     int error_column = input_stream.getEndColumn();
     String error_after = null;
     boolean EOFSeen = false;
     try { input_stream.readChar(); input_stream.backup(1); }
     catch (java.io.IOException e1) {
        EOFSeen = true;
        error_after = curPos <= 1 ? "" : input_stream.GetImage();
        if (curChar == '\n' || curChar == '\r') {
           error_line++;
           error_column = 0;
        }
        else
           error_column++;
     }
     if (!EOFSeen) {
        input_stream.backup(1);
        error_after = curPos <= 1 ? "" : input_stream.GetImage();
     }
     throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);
   }
  }
}

void SkipLexicalActions(Token matchedToken)
{
   switch(jjmatchedKind)
   {
      case 5 :
         input_stream.AppendSuffix(image, jjimageLen + (lengthOfMatch = jjmatchedPos + 1));
            if (parens == 0) {
                indent = 0;
                input_stream.backup(1);
                if (indentation.level == 0)
                    SwitchTo(FORCE_NEWLINE1);
                else
                    SwitchTo(FORCE_NEWLINE2);
            }
         break;
      case 8 :
         input_stream.AppendSuffix(image, jjimageLen + (lengthOfMatch = jjmatchedPos + 1));
          indenting((indent/8+1)*8);
         break;
      case 9 :
         input_stream.AppendSuffix(image, jjimageLen + (lengthOfMatch = jjmatchedPos + 1));
          indenting(indent+1);
         break;
      case 10 :
         input_stream.AppendSuffix(image, jjimageLen + (lengthOfMatch = jjmatchedPos + 1));
          indenting(0);
         break;
      case 11 :
         input_stream.AppendSuffix(image, jjimageLen + (lengthOfMatch = jjmatchedPos + 1));
            indenting(0);
         break;
      case 16 :
         input_stream.AppendSuffix(image, jjimageLen + (lengthOfMatch = jjmatchedPos + 1));
//    System.out.println("SINGLE_LINE_COMMENT "+image);
//    matchedToken.image = image.toString();
        indenting(0);
         break;
      default :
         break;
   }
}
void MoreLexicalActions()
{
   jjimageLen += (lengthOfMatch = jjmatchedPos + 1);
   switch(jjmatchedKind)
   {
      case 148 :
         input_stream.AppendSuffix(image, jjimageLen);
         jjimageLen = 0;
                           image.setLength(image.length()-3);
         break;
      case 149 :
         input_stream.AppendSuffix(image, jjimageLen);
         jjimageLen = 0;
                           image.setLength(image.length()-2);
         break;
      case 150 :
         input_stream.AppendSuffix(image, jjimageLen);
         jjimageLen = 0;
                           image.setLength(image.length()-3);
         break;
      case 151 :
         input_stream.AppendSuffix(image, jjimageLen);
         jjimageLen = 0;
                           image.setLength(image.length()-2);
         break;
      case 152 :
         input_stream.AppendSuffix(image, jjimageLen);
         jjimageLen = 0;
                           image.setLength(image.length()-3);
         break;
      case 153 :
         input_stream.AppendSuffix(image, jjimageLen);
         jjimageLen = 0;
                           image.setLength(image.length()-2);
         break;
      case 154 :
         input_stream.AppendSuffix(image, jjimageLen);
         jjimageLen = 0;
                           image.setLength(image.length()-3);
         break;
      case 155 :
         input_stream.AppendSuffix(image, jjimageLen);
         jjimageLen = 0;
                           image.setLength(image.length()-2);
         break;
      case 156 :
         input_stream.AppendSuffix(image, jjimageLen);
         jjimageLen = 0;
                           image.setLength(image.length()-3);
         break;
      case 157 :
         input_stream.AppendSuffix(image, jjimageLen);
         jjimageLen = 0;
                           image.setLength(image.length()-2);
         break;
      case 158 :
         input_stream.AppendSuffix(image, jjimageLen);
         jjimageLen = 0;
                           image.setLength(image.length()-3);
         break;
      case 159 :
         input_stream.AppendSuffix(image, jjimageLen);
         jjimageLen = 0;
                           image.setLength(image.length()-2);
         break;
      case 160 :
         input_stream.AppendSuffix(image, jjimageLen);
         jjimageLen = 0;
                           image.setLength(image.length()-3);
         break;
      case 161 :
         input_stream.AppendSuffix(image, jjimageLen);
         jjimageLen = 0;
                           image.setLength(image.length()-2);
         break;
      case 162 :
         input_stream.AppendSuffix(image, jjimageLen);
         jjimageLen = 0;
                           image.setLength(image.length()-3);
         break;
      case 163 :
         input_stream.AppendSuffix(image, jjimageLen);
         jjimageLen = 0;
                           image.setLength(image.length()-2);
         break;
      case 174 :
         input_stream.AppendSuffix(image, jjimageLen);
         jjimageLen = 0;
        int l = image.length();
        image.setLength(l-1);
        image.setCharAt(l-2, '\u005cn');
         break;
      case 176 :
         input_stream.AppendSuffix(image, jjimageLen);
         jjimageLen = 0;
             image.setCharAt(image.length()-1, '\u005cn');
         break;
      default :
         break;
   }
}
void TokenLexicalActions(Token matchedToken)
{
   switch(jjmatchedKind)
   {
      case 7 :
        input_stream.AppendSuffix(image, jjimageLen + (lengthOfMatch = jjmatchedPos + 1));
                              matchedToken.kind = NEWLINE;
         break;
      case 13 :
        input_stream.AppendSuffix(image, jjimageLen + (lengthOfMatch = jjmatchedPos + 1));
            if (indent > indentation.atLevel()) {
                indentation.pushLevel(indent);
                matchedToken.kind=INDENT;
                matchedToken.image = "<INDENT>";
            }
            else if (indentation.level > 0) {
                Token t = matchedToken;
                indentation.level -= 1;
                while (indentation.level > 0 && indent < indentation.atLevel()) {
                    indentation.level--;
                    t = addDedent(t);
                }
                if (indent != indentation.atLevel()) {
                    throw new TokenMgrError("inconsistent dedent",
                                            t.endLine, t.endColumn);
                }
                t.next = null;
            }
         break;
      case 17 :
        image.append(jjstrLiteralImages[17]);
        lengthOfMatch = jjstrLiteralImages[17].length();
                     parens++;
         break;
      case 18 :
        image.append(jjstrLiteralImages[18]);
        lengthOfMatch = jjstrLiteralImages[18].length();
                     parens--;
         break;
      case 19 :
        image.append(jjstrLiteralImages[19]);
        lengthOfMatch = jjstrLiteralImages[19].length();
                     parens++;
         break;
      case 20 :
        image.append(jjstrLiteralImages[20]);
        lengthOfMatch = jjstrLiteralImages[20].length();
                     parens--;
         break;
      case 21 :
        image.append(jjstrLiteralImages[21]);
        lengthOfMatch = jjstrLiteralImages[21].length();
                       parens++;
         break;
      case 22 :
        image.append(jjstrLiteralImages[22]);
        lengthOfMatch = jjstrLiteralImages[22].length();
                       parens--;
         break;
      case 132 :
        input_stream.AppendSuffix(image, jjimageLen + (lengthOfMatch = jjmatchedPos + 1));
    matchedToken.image = image.toString();
         break;
      case 133 :
        input_stream.AppendSuffix(image, jjimageLen + (lengthOfMatch = jjmatchedPos + 1));
    matchedToken.image = image.toString();
         break;
      case 134 :
        input_stream.AppendSuffix(image, jjimageLen + (lengthOfMatch = jjmatchedPos + 1));
    matchedToken.image = image.toString();
         break;
      case 135 :
        input_stream.AppendSuffix(image, jjimageLen + (lengthOfMatch = jjmatchedPos + 1));
    matchedToken.image = image.toString();
         break;
      case 136 :
        input_stream.AppendSuffix(image, jjimageLen + (lengthOfMatch = jjmatchedPos + 1));
    matchedToken.image = image.toString();
         break;
      case 137 :
        input_stream.AppendSuffix(image, jjimageLen + (lengthOfMatch = jjmatchedPos + 1));
    matchedToken.image = image.toString();
         break;
      case 138 :
        input_stream.AppendSuffix(image, jjimageLen + (lengthOfMatch = jjmatchedPos + 1));
    matchedToken.image = image.toString();
         break;
      case 139 :
        input_stream.AppendSuffix(image, jjimageLen + (lengthOfMatch = jjmatchedPos + 1));
    matchedToken.image = image.toString();
         break;
      case 140 :
        input_stream.AppendSuffix(image, jjimageLen + (lengthOfMatch = jjmatchedPos + 1));
    matchedToken.image = image.toString();
         break;
      case 141 :
        input_stream.AppendSuffix(image, jjimageLen + (lengthOfMatch = jjmatchedPos + 1));
    matchedToken.image = image.toString();
         break;
      case 142 :
        input_stream.AppendSuffix(image, jjimageLen + (lengthOfMatch = jjmatchedPos + 1));
    matchedToken.image = image.toString();
         break;
      case 143 :
        input_stream.AppendSuffix(image, jjimageLen + (lengthOfMatch = jjmatchedPos + 1));
    matchedToken.image = image.toString();
         break;
      case 144 :
        input_stream.AppendSuffix(image, jjimageLen + (lengthOfMatch = jjmatchedPos + 1));
    matchedToken.image = image.toString();
         break;
      case 145 :
        input_stream.AppendSuffix(image, jjimageLen + (lengthOfMatch = jjmatchedPos + 1));
    matchedToken.image = image.toString();
         break;
      case 146 :
        input_stream.AppendSuffix(image, jjimageLen + (lengthOfMatch = jjmatchedPos + 1));
    matchedToken.image = image.toString();
         break;
      case 147 :
        input_stream.AppendSuffix(image, jjimageLen + (lengthOfMatch = jjmatchedPos + 1));
    matchedToken.image = image.toString();
         break;
      default :
         break;
   }
}
private void jjCheckNAdd(int state)
{
   if (jjrounds[state] != jjround)
   {
      jjstateSet[jjnewStateCnt++] = state;
      jjrounds[state] = jjround;
   }
}
private void jjAddStates(int start, int end)
{
   do {
      jjstateSet[jjnewStateCnt++] = jjnextStates[start];
   } while (start++ != end);
}
private void jjCheckNAddTwoStates(int state1, int state2)
{
   jjCheckNAdd(state1);
   jjCheckNAdd(state2);
}

private void jjCheckNAddStates(int start, int end)
{
   do {
      jjCheckNAdd(jjnextStates[start]);
   } while (start++ != end);
}

}
