// Autogenerated AST node
package org.python.pydev.parser.jython.ast;

import org.python.pydev.parser.jython.SimpleNode;
import java.util.Arrays;

public final class MatchClass extends patternType {
    public exprType cls;
    public patternType[] patterns;
    public String[] kwd_attrs;
    public patternType[] kwd_patterns;

    public MatchClass(exprType cls, patternType[] patterns, String[] kwd_attrs, patternType[]
    kwd_patterns) {
        this.cls = cls;
        this.patterns = patterns;
        this.kwd_attrs = kwd_attrs;
        this.kwd_patterns = kwd_patterns;
    }

    @Override
    public int hashCode() {
        final int prime = 31;
        int result = 1;
        result = prime * result + ((cls == null) ? 0 : cls.hashCode());
        result = prime * result + Arrays.hashCode(patterns);
        result = prime * result + Arrays.hashCode(kwd_attrs);
        result = prime * result + Arrays.hashCode(kwd_patterns);
        return result;
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj) return true;
        if (obj == null) return false;
        if (getClass() != obj.getClass()) return false;
        MatchClass other = (MatchClass) obj;
        if (cls == null) { if (other.cls != null) return false;}
        else if (!cls.equals(other.cls)) return false;
        if (!Arrays.equals(patterns, other.patterns)) return false;
        if (!Arrays.equals(kwd_attrs, other.kwd_attrs)) return false;
        if (!Arrays.equals(kwd_patterns, other.kwd_patterns)) return false;
        return true;
    }
    @Override
    public MatchClass createCopy() {
        return createCopy(true);
    }
    @Override
    public MatchClass createCopy(boolean copyComments) {
        patternType[] new0;
        if(this.patterns != null){
        new0 = new patternType[this.patterns.length];
        for(int i=0;i<this.patterns.length;i++){
            new0[i] = (patternType) (this.patterns[i] != null?
            this.patterns[i].createCopy(copyComments):null);
        }
        }else{
            new0 = this.patterns;
        }
        String[] new1;
        if(this.kwd_attrs != null){
            new1 = new String[this.kwd_attrs.length];
            System.arraycopy(this.kwd_attrs, 0, new1, 0, this.kwd_attrs.length);
        }else{
            new1 = this.kwd_attrs;
        }
        patternType[] new2;
        if(this.kwd_patterns != null){
        new2 = new patternType[this.kwd_patterns.length];
        for(int i=0;i<this.kwd_patterns.length;i++){
            new2[i] = (patternType) (this.kwd_patterns[i] != null?
            this.kwd_patterns[i].createCopy(copyComments):null);
        }
        }else{
            new2 = this.kwd_patterns;
        }
        MatchClass temp = new MatchClass(cls!=null?(exprType)cls.createCopy(copyComments):null,
        new0, new1, new2);
        temp.beginLine = this.beginLine;
        temp.beginColumn = this.beginColumn;
        if(this.specialsBefore != null && copyComments){
            for(Object o:this.specialsBefore){
                if(o instanceof commentType){
                    commentType commentType = (commentType) o;
                    temp.getSpecialsBefore().add(commentType.createCopy(copyComments));
                }
            }
        }
        if(this.specialsAfter != null && copyComments){
            for(Object o:this.specialsAfter){
                if(o instanceof commentType){
                    commentType commentType = (commentType) o;
                    temp.getSpecialsAfter().add(commentType.createCopy(copyComments));
                }
            }
        }
        return temp;
    }

    @Override
    public String toString() {
        StringBuffer sb = new StringBuffer("MatchClass[");
        sb.append("cls=");
        sb.append(dumpThis(this.cls));
        sb.append(", ");
        sb.append("patterns=");
        sb.append(dumpThis(this.patterns));
        sb.append(", ");
        sb.append("kwd_attrs=");
        sb.append(dumpThis(this.kwd_attrs));
        sb.append(", ");
        sb.append("kwd_patterns=");
        sb.append(dumpThis(this.kwd_patterns));
        sb.append("]");
        return sb.toString();
    }

    @Override
    public Object accept(VisitorIF visitor) throws Exception {
        return visitor.visitMatchClass(this);
    }

    @Override
    public void traverse(VisitorIF visitor) throws Exception {
        if (cls != null) {
            cls.accept(visitor);
        }
        if (patterns != null) {
            for (int i = 0; i < patterns.length; i++) {
                if (patterns[i] != null) {
                    patterns[i].accept(visitor);
                }
            }
        }
        if (kwd_patterns != null) {
            for (int i = 0; i < kwd_patterns.length; i++) {
                if (kwd_patterns[i] != null) {
                    kwd_patterns[i].accept(visitor);
                }
            }
        }
    }

}
