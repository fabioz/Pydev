// Autogenerated AST node
package org.python.pydev.parser.jython.ast;

import java.util.Arrays;

public final class Assign extends stmtType {
    public exprType[] targets;
    public exprType value;

    public Assign(exprType[] targets, exprType value) {
        this.targets = targets;
        this.value = value;
    }

    public int hashCode() {
        final int prime = 31;
        int result = 1;
        result = prime * result + Arrays.hashCode(targets);
        result = prime * result + ((value == null) ? 0 : value.hashCode());
        return result;
    }

    public boolean equals(Object obj) {
        if (this == obj)
            return true;
        if (obj == null)
            return false;
        if (getClass() != obj.getClass())
            return false;
        Assign other = (Assign) obj;
        if (!Arrays.equals(targets, other.targets))
            return false;
        if (value == null) {
            if (other.value != null)
                return false;
        } else if (!value.equals(other.value))
            return false;
        return true;
    }

    public Assign createCopy() {
        return createCopy(true);
    }

    public Assign createCopy(boolean copyComments) {
        exprType[] new0;
        if (this.targets != null) {
            new0 = new exprType[this.targets.length];
            for (int i = 0; i < this.targets.length; i++) {
                new0[i] = (exprType) (this.targets[i] != null ? this.targets[i].createCopy(copyComments) : null);
            }
        } else {
            new0 = this.targets;
        }
        Assign temp = new Assign(new0, value != null ? (exprType) value.createCopy(copyComments) : null);
        temp.beginLine = this.beginLine;
        temp.beginColumn = this.beginColumn;
        if (this.specialsBefore != null && copyComments) {
            for (Object o : this.specialsBefore) {
                if (o instanceof commentType) {
                    commentType commentType = (commentType) o;
                    temp.getSpecialsBefore().add(commentType.createCopy(copyComments));
                }
            }
        }
        if (this.specialsAfter != null && copyComments) {
            for (Object o : this.specialsAfter) {
                if (o instanceof commentType) {
                    commentType commentType = (commentType) o;
                    temp.getSpecialsAfter().add(commentType.createCopy(copyComments));
                }
            }
        }
        return temp;
    }

    public String toString() {
        StringBuffer sb = new StringBuffer("Assign[");
        sb.append("targets=");
        sb.append(dumpThis(this.targets));
        sb.append(", ");
        sb.append("value=");
        sb.append(dumpThis(this.value));
        sb.append("]");
        return sb.toString();
    }

    public Object accept(VisitorIF visitor) throws Exception {
        return visitor.visitAssign(this);
    }

    public void traverse(VisitorIF visitor) throws Exception {
        if (targets != null) {
            for (int i = 0; i < targets.length; i++) {
                if (targets[i] != null) {
                    targets[i].accept(visitor);
                }
            }
        }
        if (value != null) {
            value.accept(visitor);
        }
    }

}
