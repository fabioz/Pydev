// Autogenerated AST node
package org.python.pydev.parser.jython.ast;

import org.python.pydev.parser.jython.SimpleNode;
import java.util.Arrays;

public final class MatchKeyword extends patternType {
    public exprType arg;
    public patternType value;

    public MatchKeyword(exprType arg, patternType value) {
        this.arg = arg;
        this.value = value;
    }

    @Override
    public int hashCode() {
        final int prime = 31;
        int result = 1;
        result = prime * result + ((arg == null) ? 0 : arg.hashCode());
        result = prime * result + ((value == null) ? 0 : value.hashCode());
        return result;
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj) return true;
        if (obj == null) return false;
        if (getClass() != obj.getClass()) return false;
        MatchKeyword other = (MatchKeyword) obj;
        if (arg == null) { if (other.arg != null) return false;}
        else if (!arg.equals(other.arg)) return false;
        if (value == null) { if (other.value != null) return false;}
        else if (!value.equals(other.value)) return false;
        return true;
    }
    @Override
    public MatchKeyword createCopy() {
        return createCopy(true);
    }
    @Override
    public MatchKeyword createCopy(boolean copyComments) {
        MatchKeyword temp = new MatchKeyword(arg!=null?(exprType)arg.createCopy(copyComments):null,
        value!=null?(patternType)value.createCopy(copyComments):null);
        temp.beginLine = this.beginLine;
        temp.beginColumn = this.beginColumn;
        if(this.specialsBefore != null && copyComments){
            for(Object o:this.specialsBefore){
                if(o instanceof commentType){
                    commentType commentType = (commentType) o;
                    temp.getSpecialsBefore().add(commentType.createCopy(copyComments));
                }
            }
        }
        if(this.specialsAfter != null && copyComments){
            for(Object o:this.specialsAfter){
                if(o instanceof commentType){
                    commentType commentType = (commentType) o;
                    temp.getSpecialsAfter().add(commentType.createCopy(copyComments));
                }
            }
        }
        return temp;
    }

    @Override
    public String toString() {
        StringBuffer sb = new StringBuffer("MatchKeyword[");
        sb.append("arg=");
        sb.append(dumpThis(this.arg));
        sb.append(", ");
        sb.append("value=");
        sb.append(dumpThis(this.value));
        sb.append("]");
        return sb.toString();
    }

    @Override
    public Object accept(VisitorIF visitor) throws Exception {
        return visitor.visitMatchKeyword(this);
    }

    @Override
    public void traverse(VisitorIF visitor) throws Exception {
        if (arg != null) {
            arg.accept(visitor);
        }
        if (value != null) {
            value.accept(visitor);
        }
    }

}
