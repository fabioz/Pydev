// Autogenerated AST node
package org.python.pydev.parser.jython.ast;

import org.python.pydev.parser.jython.SimpleNode;
import java.util.Arrays;

public final class MatchAs extends exprType {
    public exprType pattern;
    public String name;

    public MatchAs(exprType pattern, String name) {
        this.pattern = pattern;
        this.name = name;
    }

    @Override
    public int hashCode() {
        final int prime = 31;
        int result = 1;
        result = prime * result + ((pattern == null) ? 0 : pattern.hashCode());
        result = prime * result + ((name == null) ? 0 : name.hashCode());
        return result;
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj) return true;
        if (obj == null) return false;
        if (getClass() != obj.getClass()) return false;
        MatchAs other = (MatchAs) obj;
        if (pattern == null) { if (other.pattern != null) return false;}
        else if (!pattern.equals(other.pattern)) return false;
        if (name == null) { if (other.name != null) return false;}
        else if (!name.equals(other.name)) return false;
        return true;
    }
    @Override
    public MatchAs createCopy() {
        return createCopy(true);
    }
    @Override
    public MatchAs createCopy(boolean copyComments) {
        MatchAs temp = new MatchAs(pattern!=null?(exprType)pattern.createCopy(copyComments):null,
        name);
        temp.beginLine = this.beginLine;
        temp.beginColumn = this.beginColumn;
        if(this.specialsBefore != null && copyComments){
            for(Object o:this.specialsBefore){
                if(o instanceof commentType){
                    commentType commentType = (commentType) o;
                    temp.getSpecialsBefore().add(commentType.createCopy(copyComments));
                }
            }
        }
        if(this.specialsAfter != null && copyComments){
            for(Object o:this.specialsAfter){
                if(o instanceof commentType){
                    commentType commentType = (commentType) o;
                    temp.getSpecialsAfter().add(commentType.createCopy(copyComments));
                }
            }
        }
        return temp;
    }

    @Override
    public String toString() {
        StringBuffer sb = new StringBuffer("MatchAs[");
        sb.append("pattern=");
        sb.append(dumpThis(this.pattern));
        sb.append(", ");
        sb.append("name=");
        sb.append(dumpThis(this.name));
        sb.append("]");
        return sb.toString();
    }

    @Override
    public Object accept(VisitorIF visitor) throws Exception {
        return visitor.visitMatchAs(this);
    }

    @Override
    public void traverse(VisitorIF visitor) throws Exception {
        if (pattern != null) {
            pattern.accept(visitor);
        }
    }

}
