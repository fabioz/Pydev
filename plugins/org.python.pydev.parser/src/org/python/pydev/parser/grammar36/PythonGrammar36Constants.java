/* Generated By:JJTree&JavaCC: Do not edit this line. PythonGrammar36Constants.java */
package org.python.pydev.parser.grammar36;


/**
 * Token literal values and constants.
 * Generated by org.javacc.parser.OtherFilesGen#start()
 */
public interface PythonGrammar36Constants {

  /** End of File. */
  int EOF = 0;
  /** RegularExpression Id. */
  int SPACE = 1;
  /** RegularExpression Id. */
  int CONTINUATION = 4;
  /** RegularExpression Id. */
  int NEWLINE1 = 5;
  /** RegularExpression Id. */
  int NEWLINE = 6;
  /** RegularExpression Id. */
  int NEWLINE2 = 7;
  /** RegularExpression Id. */
  int CRLF1 = 11;
  /** RegularExpression Id. */
  int DEDENT = 13;
  /** RegularExpression Id. */
  int INDENT = 14;
  /** RegularExpression Id. */
  int TRAILING_COMMENT = 15;
  /** RegularExpression Id. */
  int SINGLE_LINE_COMMENT = 16;
  /** RegularExpression Id. */
  int LPAREN = 17;
  /** RegularExpression Id. */
  int RPAREN = 18;
  /** RegularExpression Id. */
  int LBRACE = 19;
  /** RegularExpression Id. */
  int RBRACE = 20;
  /** RegularExpression Id. */
  int LBRACKET = 21;
  /** RegularExpression Id. */
  int RBRACKET = 22;
  /** RegularExpression Id. */
  int SEMICOLON = 23;
  /** RegularExpression Id. */
  int COMMA = 24;
  /** RegularExpression Id. */
  int DOT = 25;
  /** RegularExpression Id. */
  int COLON = 26;
  /** RegularExpression Id. */
  int PLUS = 27;
  /** RegularExpression Id. */
  int MINUS = 28;
  /** RegularExpression Id. */
  int MINUS_GREATER = 29;
  /** RegularExpression Id. */
  int MULTIPLY = 30;
  /** RegularExpression Id. */
  int DIVIDE = 31;
  /** RegularExpression Id. */
  int FLOORDIVIDE = 32;
  /** RegularExpression Id. */
  int POWER = 33;
  /** RegularExpression Id. */
  int LSHIFT = 34;
  /** RegularExpression Id. */
  int RSHIFT = 35;
  /** RegularExpression Id. */
  int MODULO = 36;
  /** RegularExpression Id. */
  int NOT = 37;
  /** RegularExpression Id. */
  int XOR = 38;
  /** RegularExpression Id. */
  int OR = 39;
  /** RegularExpression Id. */
  int AND = 40;
  /** RegularExpression Id. */
  int EQUAL = 41;
  /** RegularExpression Id. */
  int GREATER = 42;
  /** RegularExpression Id. */
  int LESS = 43;
  /** RegularExpression Id. */
  int EQEQUAL = 44;
  /** RegularExpression Id. */
  int EQLESS = 45;
  /** RegularExpression Id. */
  int EQGREATER = 46;
  /** RegularExpression Id. */
  int NOTEQUAL = 47;
  /** RegularExpression Id. */
  int PLUSEQ = 48;
  /** RegularExpression Id. */
  int MINUSEQ = 49;
  /** RegularExpression Id. */
  int MULTIPLYEQ = 50;
  /** RegularExpression Id. */
  int DOTEQ = 51;
  /** RegularExpression Id. */
  int DIVIDEEQ = 52;
  /** RegularExpression Id. */
  int FLOORDIVIDEEQ = 53;
  /** RegularExpression Id. */
  int MODULOEQ = 54;
  /** RegularExpression Id. */
  int ANDEQ = 55;
  /** RegularExpression Id. */
  int OREQ = 56;
  /** RegularExpression Id. */
  int XOREQ = 57;
  /** RegularExpression Id. */
  int LSHIFTEQ = 58;
  /** RegularExpression Id. */
  int RSHIFTEQ = 59;
  /** RegularExpression Id. */
  int POWEREQ = 60;
  /** RegularExpression Id. */
  int OR_BOOL = 61;
  /** RegularExpression Id. */
  int AND_BOOL = 62;
  /** RegularExpression Id. */
  int NOT_BOOL = 63;
  /** RegularExpression Id. */
  int IS = 64;
  /** RegularExpression Id. */
  int IN = 65;
  /** RegularExpression Id. */
  int LAMBDA = 66;
  /** RegularExpression Id. */
  int IF = 67;
  /** RegularExpression Id. */
  int ELSE = 68;
  /** RegularExpression Id. */
  int ELIF = 69;
  /** RegularExpression Id. */
  int WHILE = 70;
  /** RegularExpression Id. */
  int FOR = 71;
  /** RegularExpression Id. */
  int TRY = 72;
  /** RegularExpression Id. */
  int EXCEPT = 73;
  /** RegularExpression Id. */
  int DEF = 74;
  /** RegularExpression Id. */
  int ASYNC = 75;
  /** RegularExpression Id. */
  int AWAIT = 76;
  /** RegularExpression Id. */
  int CLASS = 77;
  /** RegularExpression Id. */
  int FINALLY = 78;
  /** RegularExpression Id. */
  int PASS = 79;
  /** RegularExpression Id. */
  int BREAK = 80;
  /** RegularExpression Id. */
  int CONTINUE = 81;
  /** RegularExpression Id. */
  int RETURN = 82;
  /** RegularExpression Id. */
  int YIELD = 83;
  /** RegularExpression Id. */
  int IMPORT = 84;
  /** RegularExpression Id. */
  int FROM = 85;
  /** RegularExpression Id. */
  int DEL = 86;
  /** RegularExpression Id. */
  int RAISE = 87;
  /** RegularExpression Id. */
  int GLOBAL = 88;
  /** RegularExpression Id. */
  int NONLOCAL = 89;
  /** RegularExpression Id. */
  int ASSERT = 90;
  /** RegularExpression Id. */
  int AS = 91;
  /** RegularExpression Id. */
  int WITH = 92;
  /** RegularExpression Id. */
  int FALSE = 93;
  /** RegularExpression Id. */
  int TRUE = 94;
  /** RegularExpression Id. */
  int NONE = 95;
  /** RegularExpression Id. */
  int AT = 96;
  /** RegularExpression Id. */
  int NAME = 97;
  /** RegularExpression Id. */
  int LETTER = 98;
  /** RegularExpression Id. */
  int DECNUMBER = 99;
  /** RegularExpression Id. */
  int HEXNUMBER = 100;
  /** RegularExpression Id. */
  int OCTNUMBER = 101;
  /** RegularExpression Id. */
  int BINNUMBER = 102;
  /** RegularExpression Id. */
  int FLOAT = 103;
  /** RegularExpression Id. */
  int COMPLEX = 104;
  /** RegularExpression Id. */
  int EXPONENT = 105;
  /** RegularExpression Id. */
  int DIGIT = 106;
  /** RegularExpression Id. */
  int SINGLE_STRING = 131;
  /** RegularExpression Id. */
  int SINGLE_STRING2 = 132;
  /** RegularExpression Id. */
  int TRIPLE_STRING = 133;
  /** RegularExpression Id. */
  int TRIPLE_STRING2 = 134;
  /** RegularExpression Id. */
  int SINGLE_BSTRING = 135;
  /** RegularExpression Id. */
  int SINGLE_BSTRING2 = 136;
  /** RegularExpression Id. */
  int TRIPLE_BSTRING = 137;
  /** RegularExpression Id. */
  int TRIPLE_BSTRING2 = 138;
  /** RegularExpression Id. */
  int SINGLE_FSTRING = 139;
  /** RegularExpression Id. */
  int SINGLE_FSTRING2 = 140;
  /** RegularExpression Id. */
  int TRIPLE_FSTRING = 141;
  /** RegularExpression Id. */
  int TRIPLE_FSTRING2 = 142;
  /** RegularExpression Id. */
  int SINGLE_USTRING = 143;
  /** RegularExpression Id. */
  int SINGLE_USTRING2 = 144;
  /** RegularExpression Id. */
  int TRIPLE_USTRING = 145;
  /** RegularExpression Id. */
  int TRIPLE_USTRING2 = 146;

  /** Lexical state. */
  int DEFAULT = 0;
  /** Lexical state. */
  int FORCE_NEWLINE1 = 1;
  /** Lexical state. */
  int FORCE_NEWLINE2 = 2;
  /** Lexical state. */
  int INDENTING = 3;
  /** Lexical state. */
  int INDENTATION_UNCHANGED = 4;
  /** Lexical state. */
  int UNREACHABLE = 5;
  /** Lexical state. */
  int IN_STRING11 = 6;
  /** Lexical state. */
  int IN_STRING21 = 7;
  /** Lexical state. */
  int IN_STRING13 = 8;
  /** Lexical state. */
  int IN_STRING23 = 9;
  /** Lexical state. */
  int IN_BSTRING11 = 10;
  /** Lexical state. */
  int IN_BSTRING21 = 11;
  /** Lexical state. */
  int IN_BSTRING13 = 12;
  /** Lexical state. */
  int IN_BSTRING23 = 13;
  /** Lexical state. */
  int IN_FSTRING11 = 14;
  /** Lexical state. */
  int IN_FSTRING21 = 15;
  /** Lexical state. */
  int IN_FSTRING13 = 16;
  /** Lexical state. */
  int IN_FSTRING23 = 17;
  /** Lexical state. */
  int IN_USTRING11 = 18;
  /** Lexical state. */
  int IN_USTRING21 = 19;
  /** Lexical state. */
  int IN_USTRING13 = 20;
  /** Lexical state. */
  int IN_USTRING23 = 21;
  /** Lexical state. */
  int IN_STRING1NLC = 22;
  /** Lexical state. */
  int IN_STRING2NLC = 23;
  /** Lexical state. */
  int IN_USTRING1NLC = 24;
  /** Lexical state. */
  int IN_USTRING2NLC = 25;
  /** Lexical state. */
  int IN_BSTRING1NLC = 26;
  /** Lexical state. */
  int IN_BSTRING2NLC = 27;
  /** Lexical state. */
  int IN_FSTRING1NLC = 28;
  /** Lexical state. */
  int IN_FSTRING2NLC = 29;

  /** Literal token values. */
  String[] tokenImage = {
    "<EOF>",
    "\" \"",
    "\"\\t\"",
    "\"\\f\"",
    "<CONTINUATION>",
    "<NEWLINE1>",
    "<NEWLINE>",
    "<NEWLINE2>",
    "\"\\t\"",
    "\" \"",
    "\"\\f\"",
    "<CRLF1>",
    "\"\"",
    "\"\"",
    "\"<INDENT>\"",
    "<TRAILING_COMMENT>",
    "<SINGLE_LINE_COMMENT>",
    "\"(\"",
    "\")\"",
    "\"{\"",
    "\"}\"",
    "\"[\"",
    "\"]\"",
    "\";\"",
    "\",\"",
    "\".\"",
    "\":\"",
    "\"+\"",
    "\"-\"",
    "\"->\"",
    "\"*\"",
    "\"/\"",
    "\"//\"",
    "\"**\"",
    "\"<<\"",
    "\">>\"",
    "\"%\"",
    "\"~\"",
    "\"^\"",
    "\"|\"",
    "\"&\"",
    "\"=\"",
    "\">\"",
    "\"<\"",
    "\"==\"",
    "\"<=\"",
    "\">=\"",
    "\"!=\"",
    "\"+=\"",
    "\"-=\"",
    "\"*=\"",
    "\"@=\"",
    "\"/=\"",
    "\"//=\"",
    "\"%=\"",
    "\"&=\"",
    "\"|=\"",
    "\"^=\"",
    "\"<<=\"",
    "\">>=\"",
    "\"**=\"",
    "\"or\"",
    "\"and\"",
    "\"not\"",
    "\"is\"",
    "\"in\"",
    "\"lambda\"",
    "\"if\"",
    "\"else\"",
    "\"elif\"",
    "\"while\"",
    "\"for\"",
    "\"try\"",
    "\"except\"",
    "\"def\"",
    "\"async\"",
    "\"await\"",
    "\"class\"",
    "\"finally\"",
    "\"pass\"",
    "\"break\"",
    "\"continue\"",
    "\"return\"",
    "\"yield\"",
    "\"import\"",
    "\"from\"",
    "\"del\"",
    "\"raise\"",
    "\"global\"",
    "\"nonlocal\"",
    "\"assert\"",
    "\"as\"",
    "\"with\"",
    "\"False\"",
    "\"True\"",
    "\"None\"",
    "\"@\"",
    "<NAME>",
    "<LETTER>",
    "<DECNUMBER>",
    "<HEXNUMBER>",
    "<OCTNUMBER>",
    "<BINNUMBER>",
    "<FLOAT>",
    "<COMPLEX>",
    "<EXPONENT>",
    "<DIGIT>",
    "<token of kind 107>",
    "<token of kind 108>",
    "<token of kind 109>",
    "<token of kind 110>",
    "<token of kind 111>",
    "<token of kind 112>",
    "<token of kind 113>",
    "<token of kind 114>",
    "<token of kind 115>",
    "<token of kind 116>",
    "<token of kind 117>",
    "<token of kind 118>",
    "<token of kind 119>",
    "<token of kind 120>",
    "<token of kind 121>",
    "<token of kind 122>",
    "<token of kind 123>",
    "<token of kind 124>",
    "<token of kind 125>",
    "<token of kind 126>",
    "<token of kind 127>",
    "<token of kind 128>",
    "<token of kind 129>",
    "<token of kind 130>",
    "\"\\\'\"",
    "\"\\\"\"",
    "\"\\\'\\\'\\\'\"",
    "\"\\\"\\\"\\\"\"",
    "\"\\\'\"",
    "\"\\\"\"",
    "\"\\\'\\\'\\\'\"",
    "\"\\\"\\\"\\\"\"",
    "\"\\\'\"",
    "\"\\\"\"",
    "\"\\\'\\\'\\\'\"",
    "\"\\\"\\\"\\\"\"",
    "\"\\\'\"",
    "\"\\\"\"",
    "\"\\\'\\\'\\\'\"",
    "\"\\\"\\\"\\\"\"",
    "\"\\\\\\r\\n\"",
    "<token of kind 148>",
    "\"\\\\\\r\\n\"",
    "<token of kind 150>",
    "\"\\\\\\r\\n\"",
    "<token of kind 152>",
    "\"\\\\\\r\\n\"",
    "<token of kind 154>",
    "\"\\\\\\r\\n\"",
    "<token of kind 156>",
    "\"\\\\\\r\\n\"",
    "<token of kind 158>",
    "\"\\\\\\r\\n\"",
    "<token of kind 160>",
    "\"\\\\\\r\\n\"",
    "<token of kind 162>",
    "\"\"",
    "\"\"",
    "\"\"",
    "\"\"",
    "\"\"",
    "\"\"",
    "\"\"",
    "\"\"",
    "<token of kind 171>",
    "<token of kind 172>",
    "\"\\r\\n\"",
    "\"\\n\"",
    "\"\\r\"",
    "<token of kind 176>",
    "<token of kind 177>",
  };

}
